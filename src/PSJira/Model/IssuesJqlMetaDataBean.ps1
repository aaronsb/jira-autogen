#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The description of the page of issues loaded by the provided JQL query.

.PARAMETER Count
The number of issues that were loaded in this evaluation.
.PARAMETER MaxResults
The maximum number of issues that could be loaded in this evaluation.
.PARAMETER StartAt
The index of the first issue.
.PARAMETER TotalCount
The total number of issues the JQL returned.
.PARAMETER ValidationWarnings
Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.
.OUTPUTS

IssuesJqlMetaDataBean<PSCustomObject>
#>

function Initialize-IssuesJqlMetaDataBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Count},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${MaxResults},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${StartAt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${TotalCount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ValidationWarnings}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssuesJqlMetaDataBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Count) {
            throw "invalid value for 'Count', 'Count' cannot be null."
        }

        if ($null -eq $MaxResults) {
            throw "invalid value for 'MaxResults', 'MaxResults' cannot be null."
        }

        if ($null -eq $StartAt) {
            throw "invalid value for 'StartAt', 'StartAt' cannot be null."
        }

        if ($null -eq $TotalCount) {
            throw "invalid value for 'TotalCount', 'TotalCount' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "count" = ${Count}
            "maxResults" = ${MaxResults}
            "startAt" = ${StartAt}
            "totalCount" = ${TotalCount}
            "validationWarnings" = ${ValidationWarnings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssuesJqlMetaDataBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssuesJqlMetaDataBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssuesJqlMetaDataBean<PSCustomObject>
#>
function ConvertFrom-JsonToIssuesJqlMetaDataBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssuesJqlMetaDataBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssuesJqlMetaDataBean
        $AllProperties = ("count", "maxResults", "startAt", "totalCount", "validationWarnings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'count' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'count' missing."
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxResults"))) {
            throw "Error! JSON cannot be serialized due to the required property 'maxResults' missing."
        } else {
            $MaxResults = $JsonParameters.PSobject.Properties["maxResults"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'startAt' missing."
        } else {
            $StartAt = $JsonParameters.PSobject.Properties["startAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalCount"))) {
            throw "Error! JSON cannot be serialized due to the required property 'totalCount' missing."
        } else {
            $TotalCount = $JsonParameters.PSobject.Properties["totalCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validationWarnings"))) { #optional property not found
            $ValidationWarnings = $null
        } else {
            $ValidationWarnings = $JsonParameters.PSobject.Properties["validationWarnings"].value
        }

        $PSO = [PSCustomObject]@{
            "count" = ${Count}
            "maxResults" = ${MaxResults}
            "startAt" = ${StartAt}
            "totalCount" = ${TotalCount}
            "validationWarnings" = ${ValidationWarnings}
        }

        return $PSO
    }

}


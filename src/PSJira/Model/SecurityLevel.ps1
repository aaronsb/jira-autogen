#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an issue level security item.

.PARAMETER Description
The description of the issue level security item.
.PARAMETER Id
The ID of the issue level security item.
.PARAMETER IsDefault
Whether the issue level security item is the default.
.PARAMETER IssueSecuritySchemeId
The ID of the issue level security scheme.
.PARAMETER Name
The name of the issue level security item.
.PARAMETER Self
The URL of the issue level security item.
.OUTPUTS

SecurityLevel<PSCustomObject>
#>

function Initialize-SecurityLevel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDefault},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueSecuritySchemeId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self}
    )

    Process {
        'Creating PSCustomObject: PSJira => SecurityLevel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "isDefault" = ${IsDefault}
            "issueSecuritySchemeId" = ${IssueSecuritySchemeId}
            "name" = ${Name}
            "self" = ${Self}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SecurityLevel<PSCustomObject>

.DESCRIPTION

Convert from JSON to SecurityLevel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SecurityLevel<PSCustomObject>
#>
function ConvertFrom-JsonToSecurityLevel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => SecurityLevel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SecurityLevel
        $AllProperties = ("description", "id", "isDefault", "issueSecuritySchemeId", "name", "self")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDefault"))) { #optional property not found
            $IsDefault = $null
        } else {
            $IsDefault = $JsonParameters.PSobject.Properties["isDefault"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueSecuritySchemeId"))) { #optional property not found
            $IssueSecuritySchemeId = $null
        } else {
            $IssueSecuritySchemeId = $JsonParameters.PSobject.Properties["issueSecuritySchemeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "isDefault" = ${IsDefault}
            "issueSecuritySchemeId" = ${IssueSecuritySchemeId}
            "name" = ${Name}
            "self" = ${Self}
        }

        return $PSO
    }

}


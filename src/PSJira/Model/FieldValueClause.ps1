#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A clause that asserts the current value of a field. For example, `summary ~ test`.

.PARAMETER Field
No description available.
.PARAMETER Operand
No description available.
.PARAMETER Operator
The operator between the field and operand.
.OUTPUTS

FieldValueClause<PSCustomObject>
#>

function Initialize-FieldValueClause {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Field},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Operand},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("=", "!=", ">", "<", ">=", "<=", "in", "not in", "~", "~=", "is", "is not")]
        [String]
        ${Operator}
    )

    Process {
        'Creating PSCustomObject: PSJira => FieldValueClause' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Field) {
            throw "invalid value for 'Field', 'Field' cannot be null."
        }

        if ($null -eq $Operand) {
            throw "invalid value for 'Operand', 'Operand' cannot be null."
        }

        if ($null -eq $Operator) {
            throw "invalid value for 'Operator', 'Operator' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "field" = ${Field}
            "operand" = ${Operand}
            "operator" = ${Operator}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FieldValueClause<PSCustomObject>

.DESCRIPTION

Convert from JSON to FieldValueClause<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FieldValueClause<PSCustomObject>
#>
function ConvertFrom-JsonToFieldValueClause {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => FieldValueClause' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FieldValueClause
        $AllProperties = ("field", "operand", "operator")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'field' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "field"))) {
            throw "Error! JSON cannot be serialized due to the required property 'field' missing."
        } else {
            $Field = $JsonParameters.PSobject.Properties["field"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operand"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operand' missing."
        } else {
            $Operand = $JsonParameters.PSobject.Properties["operand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operator"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operator' missing."
        } else {
            $Operator = $JsonParameters.PSobject.Properties["operator"].value
        }

        $PSO = [PSCustomObject]@{
            "field" = ${Field}
            "operand" = ${Operand}
            "operator" = ${Operator}
        }

        return $PSO
    }

}


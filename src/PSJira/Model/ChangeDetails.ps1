#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A change item.

.PARAMETER Field
The name of the field changed.
.PARAMETER FieldId
The ID of the field changed.
.PARAMETER Fieldtype
The type of the field changed.
.PARAMETER VarFrom
The details of the original value.
.PARAMETER FromString
The details of the original value as a string.
.PARAMETER To
The details of the new value.
.PARAMETER ToString
The details of the new value as a string.
.OUTPUTS

ChangeDetails<PSCustomObject>
#>

function Initialize-ChangeDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Field},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FieldId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Fieldtype},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFrom},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FromString},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${To},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ToString}
    )

    Process {
        'Creating PSCustomObject: PSJira => ChangeDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "field" = ${Field}
            "fieldId" = ${FieldId}
            "fieldtype" = ${Fieldtype}
            "from" = ${VarFrom}
            "fromString" = ${FromString}
            "to" = ${To}
            "toString" = ${ToString}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ChangeDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to ChangeDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ChangeDetails<PSCustomObject>
#>
function ConvertFrom-JsonToChangeDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ChangeDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ChangeDetails
        $AllProperties = ("field", "fieldId", "fieldtype", "from", "fromString", "to", "toString")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "field"))) { #optional property not found
            $Field = $null
        } else {
            $Field = $JsonParameters.PSobject.Properties["field"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fieldId"))) { #optional property not found
            $FieldId = $null
        } else {
            $FieldId = $JsonParameters.PSobject.Properties["fieldId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fieldtype"))) { #optional property not found
            $Fieldtype = $null
        } else {
            $Fieldtype = $JsonParameters.PSobject.Properties["fieldtype"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) { #optional property not found
            $VarFrom = $null
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fromString"))) { #optional property not found
            $FromString = $null
        } else {
            $FromString = $JsonParameters.PSobject.Properties["fromString"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) { #optional property not found
            $To = $null
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "toString"))) { #optional property not found
            $ToString = $null
        } else {
            $ToString = $JsonParameters.PSobject.Properties["toString"].value
        }

        $PSO = [PSCustomObject]@{
            "field" = ${Field}
            "fieldId" = ${FieldId}
            "fieldtype" = ${Fieldtype}
            "from" = ${VarFrom}
            "fromString" = ${FromString}
            "to" = ${To}
            "toString" = ${ToString}
        }

        return $PSO
    }

}


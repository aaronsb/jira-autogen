#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the status being created.

.PARAMETER Description
The description of the status.
.PARAMETER Name
The name of the status.
.PARAMETER StatusCategory
The category of the status.
.OUTPUTS

StatusCreate<PSCustomObject>
#>

function Initialize-StatusCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TODO", "IN_PROGRESS", "DONE")]
        [String]
        ${StatusCategory}
    )

    Process {
        'Creating PSCustomObject: PSJira => StatusCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 255) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 255."
        }

        if ($null -eq $StatusCategory) {
            throw "invalid value for 'StatusCategory', 'StatusCategory' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "name" = ${Name}
            "statusCategory" = ${StatusCategory}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to StatusCreate<PSCustomObject>

.DESCRIPTION

Convert from JSON to StatusCreate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

StatusCreate<PSCustomObject>
#>
function ConvertFrom-JsonToStatusCreate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => StatusCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in StatusCreate
        $AllProperties = ("description", "name", "statusCategory")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusCategory"))) {
            throw "Error! JSON cannot be serialized due to the required property 'statusCategory' missing."
        } else {
            $StatusCategory = $JsonParameters.PSobject.Properties["statusCategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "name" = ${Name}
            "statusCategory" = ${StatusCategory}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about the issues created and the errors for requests that failed.

.PARAMETER Errors
Error details for failed issue creation requests.
.PARAMETER Issues
Details of the issues created.
.OUTPUTS

CreatedIssues<PSCustomObject>
#>

function Initialize-CreatedIssues {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Errors},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Issues}
    )

    Process {
        'Creating PSCustomObject: PSJira => CreatedIssues' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "errors" = ${Errors}
            "issues" = ${Issues}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreatedIssues<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreatedIssues<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreatedIssues<PSCustomObject>
#>
function ConvertFrom-JsonToCreatedIssues {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => CreatedIssues' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreatedIssues
        $AllProperties = ("errors", "issues")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) { #optional property not found
            $Errors = $null
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issues"))) { #optional property not found
            $Issues = $null
        } else {
            $Issues = $JsonParameters.PSobject.Properties["issues"].value
        }

        $PSO = [PSCustomObject]@{
            "errors" = ${Errors}
            "issues" = ${Issues}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The details about a workflow validation error.

.PARAMETER Code
An error code.
.PARAMETER ElementReference
No description available.
.PARAMETER Level
The validation error level.
.PARAMETER Message
An error message.
.PARAMETER Type
The type of element the error or warning references.
.OUTPUTS

WorkflowValidationError<PSCustomObject>
#>

function Initialize-WorkflowValidationError {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ElementReference},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("WARNING", "ERROR")]
        [String]
        ${Level},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("RULE", "STATUS", "STATUS_LAYOUT", "STATUS_PROPERTY", "WORKFLOW", "TRANSITION", "TRANSITION_PROPERTY", "SCOPE", "STATUS_MAPPING", "TRIGGER")]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowValidationError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "code" = ${Code}
            "elementReference" = ${ElementReference}
            "level" = ${Level}
            "message" = ${Message}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowValidationError<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowValidationError<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowValidationError<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowValidationError {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowValidationError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowValidationError
        $AllProperties = ("code", "elementReference", "level", "message", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "elementReference"))) { #optional property not found
            $ElementReference = $null
        } else {
            $ElementReference = $JsonParameters.PSobject.Properties["elementReference"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "level"))) { #optional property not found
            $Level = $null
        } else {
            $Level = $JsonParameters.PSobject.Properties["level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "code" = ${Code}
            "elementReference" = ${ElementReference}
            "level" = ${Level}
            "message" = ${Message}
            "type" = ${Type}
        }

        return $PSO
    }

}


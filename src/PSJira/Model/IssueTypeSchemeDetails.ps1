#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an issue type scheme and its associated issue types.

.PARAMETER DefaultIssueTypeId
The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`.
.PARAMETER Description
The description of the issue type scheme. The maximum length is 4000 characters.
.PARAMETER IssueTypeIds
The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required.
.PARAMETER Name
The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
.OUTPUTS

IssueTypeSchemeDetails<PSCustomObject>
#>

function Initialize-IssueTypeSchemeDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultIssueTypeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IssueTypeIds},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueTypeSchemeDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $IssueTypeIds) {
            throw "invalid value for 'IssueTypeIds', 'IssueTypeIds' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "defaultIssueTypeId" = ${DefaultIssueTypeId}
            "description" = ${Description}
            "issueTypeIds" = ${IssueTypeIds}
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueTypeSchemeDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueTypeSchemeDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueTypeSchemeDetails<PSCustomObject>
#>
function ConvertFrom-JsonToIssueTypeSchemeDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueTypeSchemeDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueTypeSchemeDetails
        $AllProperties = ("defaultIssueTypeId", "description", "issueTypeIds", "name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'issueTypeIds' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueTypeIds' missing."
        } else {
            $IssueTypeIds = $JsonParameters.PSobject.Properties["issueTypeIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultIssueTypeId"))) { #optional property not found
            $DefaultIssueTypeId = $null
        } else {
            $DefaultIssueTypeId = $JsonParameters.PSobject.Properties["defaultIssueTypeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "defaultIssueTypeId" = ${DefaultIssueTypeId}
            "description" = ${Description}
            "issueTypeIds" = ${IssueTypeIds}
            "name" = ${Name}
        }

        return $PSO
    }

}


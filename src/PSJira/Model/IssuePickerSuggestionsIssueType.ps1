#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A type of issue suggested for use in auto-completion.

.PARAMETER Id
The ID of the type of issues suggested for use in auto-completion.
.PARAMETER Issues
A list of issues suggested for use in auto-completion.
.PARAMETER Label
The label of the type of issues suggested for use in auto-completion.
.PARAMETER Msg
If no issue suggestions are found, returns a message indicating no suggestions were found,
.PARAMETER Sub
If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.
.OUTPUTS

IssuePickerSuggestionsIssueType<PSCustomObject>
#>

function Initialize-IssuePickerSuggestionsIssueType {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Issues},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Msg},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Sub}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssuePickerSuggestionsIssueType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "issues" = ${Issues}
            "label" = ${Label}
            "msg" = ${Msg}
            "sub" = ${Sub}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssuePickerSuggestionsIssueType<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssuePickerSuggestionsIssueType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssuePickerSuggestionsIssueType<PSCustomObject>
#>
function ConvertFrom-JsonToIssuePickerSuggestionsIssueType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssuePickerSuggestionsIssueType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssuePickerSuggestionsIssueType
        $AllProperties = ("id", "issues", "label", "msg", "sub")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issues"))) { #optional property not found
            $Issues = $null
        } else {
            $Issues = $JsonParameters.PSobject.Properties["issues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "msg"))) { #optional property not found
            $Msg = $null
        } else {
            $Msg = $JsonParameters.PSobject.Properties["msg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sub"))) { #optional property not found
            $Sub = $null
        } else {
            $Sub = $JsonParameters.PSobject.Properties["sub"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "issues" = ${Issues}
            "label" = ${Label}
            "msg" = ${Msg}
            "sub" = ${Sub}
        }

        return $PSO
    }

}


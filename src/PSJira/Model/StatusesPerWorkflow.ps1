#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The statuses associated with each workflow.

.PARAMETER InitialStatusId
The ID of the initial status for the workflow.
.PARAMETER Statuses
The status IDs associated with the workflow.
.PARAMETER WorkflowId
The ID of the workflow.
.OUTPUTS

StatusesPerWorkflow<PSCustomObject>
#>

function Initialize-StatusesPerWorkflow {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitialStatusId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Statuses},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WorkflowId}
    )

    Process {
        'Creating PSCustomObject: PSJira => StatusesPerWorkflow' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "initialStatusId" = ${InitialStatusId}
            "statuses" = ${Statuses}
            "workflowId" = ${WorkflowId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to StatusesPerWorkflow<PSCustomObject>

.DESCRIPTION

Convert from JSON to StatusesPerWorkflow<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

StatusesPerWorkflow<PSCustomObject>
#>
function ConvertFrom-JsonToStatusesPerWorkflow {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => StatusesPerWorkflow' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in StatusesPerWorkflow
        $AllProperties = ("initialStatusId", "statuses", "workflowId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initialStatusId"))) { #optional property not found
            $InitialStatusId = $null
        } else {
            $InitialStatusId = $JsonParameters.PSobject.Properties["initialStatusId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statuses"))) { #optional property not found
            $Statuses = $null
        } else {
            $Statuses = $JsonParameters.PSobject.Properties["statuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workflowId"))) { #optional property not found
            $WorkflowId = $null
        } else {
            $WorkflowId = $JsonParameters.PSobject.Properties["workflowId"].value
        }

        $PSO = [PSCustomObject]@{
            "initialStatusId" = ${InitialStatusId}
            "statuses" = ${Statuses}
            "workflowId" = ${WorkflowId}
        }

        return $PSO
    }

}


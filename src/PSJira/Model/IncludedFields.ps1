#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ActuallyIncluded
No description available.
.PARAMETER Excluded
No description available.
.PARAMETER Included
No description available.
.OUTPUTS

IncludedFields<PSCustomObject>
#>

function Initialize-IncludedFields {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ActuallyIncluded},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Excluded},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Included}
    )

    Process {
        'Creating PSCustomObject: PSJira => IncludedFields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "actuallyIncluded" = ${ActuallyIncluded}
            "excluded" = ${Excluded}
            "included" = ${Included}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IncludedFields<PSCustomObject>

.DESCRIPTION

Convert from JSON to IncludedFields<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IncludedFields<PSCustomObject>
#>
function ConvertFrom-JsonToIncludedFields {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IncludedFields' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IncludedFields
        $AllProperties = ("actuallyIncluded", "excluded", "included")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actuallyIncluded"))) { #optional property not found
            $ActuallyIncluded = $null
        } else {
            $ActuallyIncluded = $JsonParameters.PSobject.Properties["actuallyIncluded"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "excluded"))) { #optional property not found
            $Excluded = $null
        } else {
            $Excluded = $JsonParameters.PSobject.Properties["excluded"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "included"))) { #optional property not found
            $Included = $null
        } else {
            $Included = $JsonParameters.PSobject.Properties["included"].value
        }

        $PSO = [PSCustomObject]@{
            "actuallyIncluded" = ${ActuallyIncluded}
            "excluded" = ${Excluded}
            "included" = ${Included}
        }

        return $PSO
    }

}


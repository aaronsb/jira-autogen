#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An ordered list of issue type IDs and information about where to move them.

.PARAMETER After
The ID of the issue type to place the moved issue types after. Required if `position` isn't provided.
.PARAMETER IssueTypeIds
A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
.PARAMETER Position
The position the issue types should be moved to. Required if `after` isn't provided.
.OUTPUTS

OrderOfIssueTypes<PSCustomObject>
#>

function Initialize-OrderOfIssueTypes {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${After},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IssueTypeIds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("First", "Last")]
        [String]
        ${Position}
    )

    Process {
        'Creating PSCustomObject: PSJira => OrderOfIssueTypes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $IssueTypeIds) {
            throw "invalid value for 'IssueTypeIds', 'IssueTypeIds' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "after" = ${After}
            "issueTypeIds" = ${IssueTypeIds}
            "position" = ${Position}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderOfIssueTypes<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderOfIssueTypes<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderOfIssueTypes<PSCustomObject>
#>
function ConvertFrom-JsonToOrderOfIssueTypes {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => OrderOfIssueTypes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderOfIssueTypes
        $AllProperties = ("after", "issueTypeIds", "position")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'issueTypeIds' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueTypeIds' missing."
        } else {
            $IssueTypeIds = $JsonParameters.PSobject.Properties["issueTypeIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "after"))) { #optional property not found
            $After = $null
        } else {
            $After = $JsonParameters.PSobject.Properties["after"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        $PSO = [PSCustomObject]@{
            "after" = ${After}
            "issueTypeIds" = ${IssueTypeIds}
            "position" = ${Position}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a notification within a notification scheme.

.PARAMETER NotificationType
The notification type, e.g `CurrentAssignee`, `Group`, `EmailAddress`.
.PARAMETER Parameter
The value corresponding to the specified notification type.
.OUTPUTS

NotificationSchemeNotificationDetails<PSCustomObject>
#>

function Initialize-NotificationSchemeNotificationDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NotificationType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Parameter}
    )

    Process {
        'Creating PSCustomObject: PSJira => NotificationSchemeNotificationDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $NotificationType) {
            throw "invalid value for 'NotificationType', 'NotificationType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "notificationType" = ${NotificationType}
            "parameter" = ${Parameter}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NotificationSchemeNotificationDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to NotificationSchemeNotificationDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NotificationSchemeNotificationDetails<PSCustomObject>
#>
function ConvertFrom-JsonToNotificationSchemeNotificationDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => NotificationSchemeNotificationDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $NotificationSchemeNotificationDetailsAdditionalProperties = @{}

        # check if Json contains properties not defined in NotificationSchemeNotificationDetails
        $AllProperties = ("notificationType", "parameter")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $NotificationSchemeNotificationDetailsAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'notificationType' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notificationType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'notificationType' missing."
        } else {
            $NotificationType = $JsonParameters.PSobject.Properties["notificationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameter"))) { #optional property not found
            $Parameter = $null
        } else {
            $Parameter = $JsonParameters.PSobject.Properties["parameter"].value
        }

        $PSO = [PSCustomObject]@{
            "notificationType" = ${NotificationType}
            "parameter" = ${Parameter}
            "AdditionalProperties" = $NotificationSchemeNotificationDetailsAdditionalProperties
        }

        return $PSO
    }

}


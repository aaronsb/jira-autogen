#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Configuration of the announcement banner.

.PARAMETER IsDismissible
Flag indicating if the announcement banner can be dismissed by the user.
.PARAMETER IsEnabled
Flag indicating if the announcement banner is enabled or not.
.PARAMETER Message
The text on the announcement banner.
.PARAMETER Visibility
Visibility of the announcement banner. Can be public or private.
.OUTPUTS

AnnouncementBannerConfigurationUpdate<PSCustomObject>
#>

function Initialize-AnnouncementBannerConfigurationUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDismissible},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Visibility}
    )

    Process {
        'Creating PSCustomObject: PSJira => AnnouncementBannerConfigurationUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "isDismissible" = ${IsDismissible}
            "isEnabled" = ${IsEnabled}
            "message" = ${Message}
            "visibility" = ${Visibility}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AnnouncementBannerConfigurationUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to AnnouncementBannerConfigurationUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AnnouncementBannerConfigurationUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToAnnouncementBannerConfigurationUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => AnnouncementBannerConfigurationUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AnnouncementBannerConfigurationUpdate
        $AllProperties = ("isDismissible", "isEnabled", "message", "visibility")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDismissible"))) { #optional property not found
            $IsDismissible = $null
        } else {
            $IsDismissible = $JsonParameters.PSobject.Properties["isDismissible"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isEnabled"))) { #optional property not found
            $IsEnabled = $null
        } else {
            $IsEnabled = $JsonParameters.PSobject.Properties["isEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        $PSO = [PSCustomObject]@{
            "isDismissible" = ${IsDismissible}
            "isEnabled" = ${IsEnabled}
            "message" = ${Message}
            "visibility" = ${Visibility}
        }

        return $PSO
    }

}


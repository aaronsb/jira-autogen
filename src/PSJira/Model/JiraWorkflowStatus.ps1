#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a status.

.PARAMETER Description
The description of the status.
.PARAMETER Id
The ID of the status.
.PARAMETER Name
The name of the status.
.PARAMETER Scope
No description available.
.PARAMETER StatusCategory
The category of the status.
.PARAMETER StatusReference
The reference of the status.
.PARAMETER Usages
The `statuses.usages` expand is an optional parameter that can be used when reading and updating statuses in Jira. It provides additional information about the projects and issue types associated with the requested statuses.
.OUTPUTS

JiraWorkflowStatus<PSCustomObject>
#>

function Initialize-JiraWorkflowStatus {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scope},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TODO", "IN_PROGRESS", "DONE")]
        [String]
        ${StatusCategory},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusReference},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Usages}
    )

    Process {
        'Creating PSCustomObject: PSJira => JiraWorkflowStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "scope" = ${Scope}
            "statusCategory" = ${StatusCategory}
            "statusReference" = ${StatusReference}
            "usages" = ${Usages}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JiraWorkflowStatus<PSCustomObject>

.DESCRIPTION

Convert from JSON to JiraWorkflowStatus<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JiraWorkflowStatus<PSCustomObject>
#>
function ConvertFrom-JsonToJiraWorkflowStatus {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JiraWorkflowStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JiraWorkflowStatus
        $AllProperties = ("description", "id", "name", "scope", "statusCategory", "statusReference", "usages")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusCategory"))) { #optional property not found
            $StatusCategory = $null
        } else {
            $StatusCategory = $JsonParameters.PSobject.Properties["statusCategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusReference"))) { #optional property not found
            $StatusReference = $null
        } else {
            $StatusReference = $JsonParameters.PSobject.Properties["statusReference"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usages"))) { #optional property not found
            $Usages = $null
        } else {
            $Usages = $JsonParameters.PSobject.Properties["usages"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "scope" = ${Scope}
            "statusCategory" = ${StatusCategory}
            "statusReference" = ${StatusReference}
            "usages" = ${Usages}
        }

        return $PSO
    }

}


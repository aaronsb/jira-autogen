#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Issue security level member.

.PARAMETER Holder
No description available.
.PARAMETER Id
The ID of the issue security level member.
.PARAMETER IssueSecurityLevelId
The ID of the issue security level.
.PARAMETER IssueSecuritySchemeId
The ID of the issue security scheme.
.PARAMETER Managed
No description available.
.OUTPUTS

SecurityLevelMember<PSCustomObject>
#>

function Initialize-SecurityLevelMember {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Holder},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueSecurityLevelId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueSecuritySchemeId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Managed}
    )

    Process {
        'Creating PSCustomObject: PSJira => SecurityLevelMember' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Holder) {
            throw "invalid value for 'Holder', 'Holder' cannot be null."
        }

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $IssueSecurityLevelId) {
            throw "invalid value for 'IssueSecurityLevelId', 'IssueSecurityLevelId' cannot be null."
        }

        if ($null -eq $IssueSecuritySchemeId) {
            throw "invalid value for 'IssueSecuritySchemeId', 'IssueSecuritySchemeId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "holder" = ${Holder}
            "id" = ${Id}
            "issueSecurityLevelId" = ${IssueSecurityLevelId}
            "issueSecuritySchemeId" = ${IssueSecuritySchemeId}
            "managed" = ${Managed}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SecurityLevelMember<PSCustomObject>

.DESCRIPTION

Convert from JSON to SecurityLevelMember<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SecurityLevelMember<PSCustomObject>
#>
function ConvertFrom-JsonToSecurityLevelMember {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => SecurityLevelMember' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $SecurityLevelMemberAdditionalProperties = @{}

        # check if Json contains properties not defined in SecurityLevelMember
        $AllProperties = ("holder", "id", "issueSecurityLevelId", "issueSecuritySchemeId", "managed")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $SecurityLevelMemberAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'holder' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "holder"))) {
            throw "Error! JSON cannot be serialized due to the required property 'holder' missing."
        } else {
            $Holder = $JsonParameters.PSobject.Properties["holder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueSecurityLevelId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueSecurityLevelId' missing."
        } else {
            $IssueSecurityLevelId = $JsonParameters.PSobject.Properties["issueSecurityLevelId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueSecuritySchemeId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueSecuritySchemeId' missing."
        } else {
            $IssueSecuritySchemeId = $JsonParameters.PSobject.Properties["issueSecuritySchemeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "managed"))) { #optional property not found
            $Managed = $null
        } else {
            $Managed = $JsonParameters.PSobject.Properties["managed"].value
        }

        $PSO = [PSCustomObject]@{
            "holder" = ${Holder}
            "id" = ${Id}
            "issueSecurityLevelId" = ${IssueSecurityLevelId}
            "issueSecuritySchemeId" = ${IssueSecuritySchemeId}
            "managed" = ${Managed}
            "AdditionalProperties" = $SecurityLevelMemberAdditionalProperties
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The Forge provided ecosystem rules available.

.PARAMETER Description
The rule description.
.PARAMETER Id
The unique ARI of the forge rule type.
.PARAMETER Name
The rule name.
.PARAMETER RuleKey
The rule key.
.PARAMETER RuleType
The rule type.
.OUTPUTS

AvailableWorkflowForgeRule<PSCustomObject>
#>

function Initialize-AvailableWorkflowForgeRule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RuleKey},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Condition", "Validator", "Function", "Screen")]
        [String]
        ${RuleType}
    )

    Process {
        'Creating PSCustomObject: PSJira => AvailableWorkflowForgeRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "ruleKey" = ${RuleKey}
            "ruleType" = ${RuleType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AvailableWorkflowForgeRule<PSCustomObject>

.DESCRIPTION

Convert from JSON to AvailableWorkflowForgeRule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AvailableWorkflowForgeRule<PSCustomObject>
#>
function ConvertFrom-JsonToAvailableWorkflowForgeRule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => AvailableWorkflowForgeRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AvailableWorkflowForgeRule
        $AllProperties = ("description", "id", "name", "ruleKey", "ruleType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleKey"))) { #optional property not found
            $RuleKey = $null
        } else {
            $RuleKey = $JsonParameters.PSobject.Properties["ruleKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleType"))) { #optional property not found
            $RuleType = $null
        } else {
            $RuleType = $JsonParameters.PSobject.Properties["ruleType"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "ruleKey" = ${RuleKey}
            "ruleType" = ${RuleType}
        }

        return $PSO
    }

}


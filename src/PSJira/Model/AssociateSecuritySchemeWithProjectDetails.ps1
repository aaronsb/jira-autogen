#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Issue security scheme, project, and remapping details.

.PARAMETER OldToNewSecurityLevelMappings
The list of scheme levels which should be remapped to new levels of the issue security scheme.
.PARAMETER ProjectId
The ID of the project.
.PARAMETER SchemeId
The ID of the issue security scheme. Providing null will clear the association with the issue security scheme.
.OUTPUTS

AssociateSecuritySchemeWithProjectDetails<PSCustomObject>
#>

function Initialize-AssociateSecuritySchemeWithProjectDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${OldToNewSecurityLevelMappings},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SchemeId}
    )

    Process {
        'Creating PSCustomObject: PSJira => AssociateSecuritySchemeWithProjectDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ProjectId) {
            throw "invalid value for 'ProjectId', 'ProjectId' cannot be null."
        }

        if ($null -eq $SchemeId) {
            throw "invalid value for 'SchemeId', 'SchemeId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "oldToNewSecurityLevelMappings" = ${OldToNewSecurityLevelMappings}
            "projectId" = ${ProjectId}
            "schemeId" = ${SchemeId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AssociateSecuritySchemeWithProjectDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to AssociateSecuritySchemeWithProjectDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AssociateSecuritySchemeWithProjectDetails<PSCustomObject>
#>
function ConvertFrom-JsonToAssociateSecuritySchemeWithProjectDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => AssociateSecuritySchemeWithProjectDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AssociateSecuritySchemeWithProjectDetails
        $AllProperties = ("oldToNewSecurityLevelMappings", "projectId", "schemeId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'projectId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'projectId' missing."
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schemeId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'schemeId' missing."
        } else {
            $SchemeId = $JsonParameters.PSobject.Properties["schemeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "oldToNewSecurityLevelMappings"))) { #optional property not found
            $OldToNewSecurityLevelMappings = $null
        } else {
            $OldToNewSecurityLevelMappings = $JsonParameters.PSobject.Properties["oldToNewSecurityLevelMappings"].value
        }

        $PSO = [PSCustomObject]@{
            "oldToNewSecurityLevelMappings" = ${OldToNewSecurityLevelMappings}
            "projectId" = ${ProjectId}
            "schemeId" = ${SchemeId}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a user assigned to a project role.

.PARAMETER ActorGroup
No description available.
.PARAMETER ActorUser
No description available.
.PARAMETER AvatarUrl
The avatar of the role actor.
.PARAMETER DisplayName
The display name of the role actor. For users, depending on the userâ€™s privacy setting, this may return an alternative value for the user's name.
.PARAMETER Id
The ID of the role actor.
.PARAMETER Name
This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
.PARAMETER Type
The type of role actor.
.OUTPUTS

RoleActor<PSCustomObject>
#>

function Initialize-RoleActor {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ActorGroup},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ActorUser},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AvatarUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("atlassian-group-role-actor", "atlassian-user-role-actor")]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSJira => RoleActor' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "actorGroup" = ${ActorGroup}
            "actorUser" = ${ActorUser}
            "avatarUrl" = ${AvatarUrl}
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoleActor<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoleActor<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoleActor<PSCustomObject>
#>
function ConvertFrom-JsonToRoleActor {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => RoleActor' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RoleActor
        $AllProperties = ("actorGroup", "actorUser", "avatarUrl", "displayName", "id", "name", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actorGroup"))) { #optional property not found
            $ActorGroup = $null
        } else {
            $ActorGroup = $JsonParameters.PSobject.Properties["actorGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actorUser"))) { #optional property not found
            $ActorUser = $null
        } else {
            $ActorUser = $JsonParameters.PSobject.Properties["actorUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avatarUrl"))) { #optional property not found
            $AvatarUrl = $null
        } else {
            $AvatarUrl = $JsonParameters.PSobject.Properties["avatarUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "actorGroup" = ${ActorGroup}
            "actorUser" = ${ActorUser}
            "avatarUrl" = ${AvatarUrl}
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
        }

        return $PSO
    }

}


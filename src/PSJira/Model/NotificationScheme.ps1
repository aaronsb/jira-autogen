#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a notification scheme.

.PARAMETER Description
The description of the notification scheme.
.PARAMETER Expand
Expand options that include additional notification scheme details in the response.
.PARAMETER Id
The ID of the notification scheme.
.PARAMETER Name
The name of the notification scheme.
.PARAMETER NotificationSchemeEvents
The notification events and associated recipients.
.PARAMETER Projects
The list of project IDs associated with the notification scheme.
.PARAMETER Scope
The scope of the notification scheme.
.PARAMETER Self
No description available.
.OUTPUTS

NotificationScheme<PSCustomObject>
#>

function Initialize-NotificationScheme {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expand},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${NotificationSchemeEvents},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${Projects},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scope},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self}
    )

    Process {
        'Creating PSCustomObject: PSJira => NotificationScheme' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "expand" = ${Expand}
            "id" = ${Id}
            "name" = ${Name}
            "notificationSchemeEvents" = ${NotificationSchemeEvents}
            "projects" = ${Projects}
            "scope" = ${Scope}
            "self" = ${Self}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NotificationScheme<PSCustomObject>

.DESCRIPTION

Convert from JSON to NotificationScheme<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NotificationScheme<PSCustomObject>
#>
function ConvertFrom-JsonToNotificationScheme {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => NotificationScheme' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in NotificationScheme
        $AllProperties = ("description", "expand", "id", "name", "notificationSchemeEvents", "projects", "scope", "self")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expand"))) { #optional property not found
            $Expand = $null
        } else {
            $Expand = $JsonParameters.PSobject.Properties["expand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notificationSchemeEvents"))) { #optional property not found
            $NotificationSchemeEvents = $null
        } else {
            $NotificationSchemeEvents = $JsonParameters.PSobject.Properties["notificationSchemeEvents"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projects"))) { #optional property not found
            $Projects = $null
        } else {
            $Projects = $JsonParameters.PSobject.Properties["projects"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "expand" = ${Expand}
            "id" = ${Id}
            "name" = ${Name}
            "notificationSchemeEvents" = ${NotificationSchemeEvents}
            "projects" = ${Projects}
            "scope" = ${Scope}
            "self" = ${Self}
        }

        return $PSO
    }

}


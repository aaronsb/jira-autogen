#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Associated issue type screen scheme and project.

.PARAMETER IssueTypeScreenSchemeId
The ID of the issue type screen scheme.
.PARAMETER ProjectId
The ID of the project.
.OUTPUTS

IssueTypeScreenSchemeProjectAssociation<PSCustomObject>
#>

function Initialize-IssueTypeScreenSchemeProjectAssociation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueTypeScreenSchemeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectId}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueTypeScreenSchemeProjectAssociation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "issueTypeScreenSchemeId" = ${IssueTypeScreenSchemeId}
            "projectId" = ${ProjectId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueTypeScreenSchemeProjectAssociation<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueTypeScreenSchemeProjectAssociation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueTypeScreenSchemeProjectAssociation<PSCustomObject>
#>
function ConvertFrom-JsonToIssueTypeScreenSchemeProjectAssociation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueTypeScreenSchemeProjectAssociation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueTypeScreenSchemeProjectAssociation
        $AllProperties = ("issueTypeScreenSchemeId", "projectId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeScreenSchemeId"))) { #optional property not found
            $IssueTypeScreenSchemeId = $null
        } else {
            $IssueTypeScreenSchemeId = $JsonParameters.PSobject.Properties["issueTypeScreenSchemeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) { #optional property not found
            $ProjectId = $null
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        $PSO = [PSCustomObject]@{
            "issueTypeScreenSchemeId" = ${IssueTypeScreenSchemeId}
            "projectId" = ${ProjectId}
        }

        return $PSO
    }

}


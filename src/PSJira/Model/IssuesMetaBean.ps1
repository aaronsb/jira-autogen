#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Meta data describing the `issues` context variable.

.PARAMETER Jql
No description available.
.OUTPUTS

IssuesMetaBean<PSCustomObject>
#>

function Initialize-IssuesMetaBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Jql}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssuesMetaBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "jql" = ${Jql}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssuesMetaBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssuesMetaBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssuesMetaBean<PSCustomObject>
#>
function ConvertFrom-JsonToIssuesMetaBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssuesMetaBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssuesMetaBean
        $AllProperties = ("jql")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jql"))) { #optional property not found
            $Jql = $null
        } else {
            $Jql = $JsonParameters.PSobject.Properties["jql"].value
        }

        $PSO = [PSCustomObject]@{
            "jql" = ${Jql}
        }

        return $PSO
    }

}


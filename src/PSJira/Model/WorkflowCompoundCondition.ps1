#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A compound workflow transition rule condition. This object returns `nodeType` as `compound`.

.PARAMETER Conditions
The list of workflow conditions.
.PARAMETER NodeType
No description available.
.PARAMETER Operator
The compound condition operator.
.OUTPUTS

WorkflowCompoundCondition<PSCustomObject>
#>

function Initialize-WorkflowCompoundCondition {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Conditions},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AND", "OR")]
        [String]
        ${Operator}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowCompoundCondition' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Conditions) {
            throw "invalid value for 'Conditions', 'Conditions' cannot be null."
        }

        if ($null -eq $NodeType) {
            throw "invalid value for 'NodeType', 'NodeType' cannot be null."
        }

        if ($null -eq $Operator) {
            throw "invalid value for 'Operator', 'Operator' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "conditions" = ${Conditions}
            "nodeType" = ${NodeType}
            "operator" = ${Operator}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowCompoundCondition<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowCompoundCondition<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowCompoundCondition<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowCompoundCondition {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowCompoundCondition' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowCompoundCondition
        $AllProperties = ("conditions", "nodeType", "operator")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'conditions' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conditions"))) {
            throw "Error! JSON cannot be serialized due to the required property 'conditions' missing."
        } else {
            $Conditions = $JsonParameters.PSobject.Properties["conditions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'nodeType' missing."
        } else {
            $NodeType = $JsonParameters.PSobject.Properties["nodeType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operator"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operator' missing."
        } else {
            $Operator = $JsonParameters.PSobject.Properties["operator"].value
        }

        $PSO = [PSCustomObject]@{
            "conditions" = ${Conditions}
            "nodeType" = ${NodeType}
            "operator" = ${Operator}
        }

        return $PSO
    }

}


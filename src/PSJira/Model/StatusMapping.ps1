#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about the mapping from a status to a new status for an issue type.

.PARAMETER IssueTypeId
The ID of the issue type.
.PARAMETER NewStatusId
The ID of the new status.
.PARAMETER StatusId
The ID of the status.
.OUTPUTS

StatusMapping<PSCustomObject>
#>

function Initialize-StatusMapping {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueTypeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NewStatusId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusId}
    )

    Process {
        'Creating PSCustomObject: PSJira => StatusMapping' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $IssueTypeId) {
            throw "invalid value for 'IssueTypeId', 'IssueTypeId' cannot be null."
        }

        if ($null -eq $NewStatusId) {
            throw "invalid value for 'NewStatusId', 'NewStatusId' cannot be null."
        }

        if ($null -eq $StatusId) {
            throw "invalid value for 'StatusId', 'StatusId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "issueTypeId" = ${IssueTypeId}
            "newStatusId" = ${NewStatusId}
            "statusId" = ${StatusId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to StatusMapping<PSCustomObject>

.DESCRIPTION

Convert from JSON to StatusMapping<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

StatusMapping<PSCustomObject>
#>
function ConvertFrom-JsonToStatusMapping {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => StatusMapping' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in StatusMapping
        $AllProperties = ("issueTypeId", "newStatusId", "statusId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'issueTypeId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueTypeId' missing."
        } else {
            $IssueTypeId = $JsonParameters.PSobject.Properties["issueTypeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "newStatusId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'newStatusId' missing."
        } else {
            $NewStatusId = $JsonParameters.PSobject.Properties["newStatusId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'statusId' missing."
        } else {
            $StatusId = $JsonParameters.PSobject.Properties["statusId"].value
        }

        $PSO = [PSCustomObject]@{
            "issueTypeId" = ${IssueTypeId}
            "newStatusId" = ${NewStatusId}
            "statusId" = ${StatusId}
        }

        return $PSO
    }

}


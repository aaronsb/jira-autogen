#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of scheme and new default level.

.PARAMETER DefaultLevelId
The ID of the issue security level to set as default for the specified scheme. Providing null will reset the default level.
.PARAMETER IssueSecuritySchemeId
The ID of the issue security scheme to set default level for.
.OUTPUTS

DefaultLevelValue<PSCustomObject>
#>

function Initialize-DefaultLevelValue {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultLevelId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueSecuritySchemeId}
    )

    Process {
        'Creating PSCustomObject: PSJira => DefaultLevelValue' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DefaultLevelId) {
            throw "invalid value for 'DefaultLevelId', 'DefaultLevelId' cannot be null."
        }

        if ($null -eq $IssueSecuritySchemeId) {
            throw "invalid value for 'IssueSecuritySchemeId', 'IssueSecuritySchemeId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "defaultLevelId" = ${DefaultLevelId}
            "issueSecuritySchemeId" = ${IssueSecuritySchemeId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DefaultLevelValue<PSCustomObject>

.DESCRIPTION

Convert from JSON to DefaultLevelValue<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DefaultLevelValue<PSCustomObject>
#>
function ConvertFrom-JsonToDefaultLevelValue {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => DefaultLevelValue' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $DefaultLevelValueAdditionalProperties = @{}

        # check if Json contains properties not defined in DefaultLevelValue
        $AllProperties = ("defaultLevelId", "issueSecuritySchemeId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $DefaultLevelValueAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'defaultLevelId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultLevelId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'defaultLevelId' missing."
        } else {
            $DefaultLevelId = $JsonParameters.PSobject.Properties["defaultLevelId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueSecuritySchemeId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueSecuritySchemeId' missing."
        } else {
            $IssueSecuritySchemeId = $JsonParameters.PSobject.Properties["issueSecuritySchemeId"].value
        }

        $PSO = [PSCustomObject]@{
            "defaultLevelId" = ${DefaultLevelId}
            "issueSecuritySchemeId" = ${IssueSecuritySchemeId}
            "AdditionalProperties" = $DefaultLevelValueAdditionalProperties
        }

        return $PSO
    }

}


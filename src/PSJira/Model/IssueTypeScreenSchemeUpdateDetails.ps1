#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an issue type screen scheme.

.PARAMETER Description
The description of the issue type screen scheme. The maximum length is 255 characters.
.PARAMETER Name
The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
.OUTPUTS

IssueTypeScreenSchemeUpdateDetails<PSCustomObject>
#>

function Initialize-IssueTypeScreenSchemeUpdateDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueTypeScreenSchemeUpdateDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueTypeScreenSchemeUpdateDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueTypeScreenSchemeUpdateDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueTypeScreenSchemeUpdateDetails<PSCustomObject>
#>
function ConvertFrom-JsonToIssueTypeScreenSchemeUpdateDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueTypeScreenSchemeUpdateDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueTypeScreenSchemeUpdateDetails
        $AllProperties = ("description", "name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "name" = ${Name}
        }

        return $PSO
    }

}


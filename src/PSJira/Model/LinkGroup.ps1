#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details a link group, which defines issue operations.

.PARAMETER Groups
No description available.
.PARAMETER Header
No description available.
.PARAMETER Id
No description available.
.PARAMETER Links
No description available.
.PARAMETER StyleClass
No description available.
.PARAMETER Weight
No description available.
.OUTPUTS

LinkGroup<PSCustomObject>
#>

function Initialize-LinkGroup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Groups},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Header},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Links},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StyleClass},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Weight}
    )

    Process {
        'Creating PSCustomObject: PSJira => LinkGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "groups" = ${Groups}
            "header" = ${Header}
            "id" = ${Id}
            "links" = ${Links}
            "styleClass" = ${StyleClass}
            "weight" = ${Weight}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LinkGroup<PSCustomObject>

.DESCRIPTION

Convert from JSON to LinkGroup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LinkGroup<PSCustomObject>
#>
function ConvertFrom-JsonToLinkGroup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => LinkGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LinkGroup
        $AllProperties = ("groups", "header", "id", "links", "styleClass", "weight")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groups"))) { #optional property not found
            $Groups = $null
        } else {
            $Groups = $JsonParameters.PSobject.Properties["groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "header"))) { #optional property not found
            $Header = $null
        } else {
            $Header = $JsonParameters.PSobject.Properties["header"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "styleClass"))) { #optional property not found
            $StyleClass = $null
        } else {
            $StyleClass = $JsonParameters.PSobject.Properties["styleClass"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        $PSO = [PSCustomObject]@{
            "groups" = ${Groups}
            "header" = ${Header}
            "id" = ${Id}
            "links" = ${Links}
            "styleClass" = ${StyleClass}
            "weight" = ${Weight}
        }

        return $PSO
    }

}


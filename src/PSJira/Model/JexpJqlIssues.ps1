#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response.

.PARAMETER MaxResults
The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
.PARAMETER Query
The JQL query.
.PARAMETER StartAt
The index of the first issue to return from the JQL query.
.PARAMETER Validation
Determines how to validate the JQL query and treat the validation results.
.OUTPUTS

JexpJqlIssues<PSCustomObject>
#>

function Initialize-JexpJqlIssues {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxResults},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Query},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${StartAt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("strict", "warn", "none")]
        [String]
        ${Validation} = "strict"
    )

    Process {
        'Creating PSCustomObject: PSJira => JexpJqlIssues' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "maxResults" = ${MaxResults}
            "query" = ${Query}
            "startAt" = ${StartAt}
            "validation" = ${Validation}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JexpJqlIssues<PSCustomObject>

.DESCRIPTION

Convert from JSON to JexpJqlIssues<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JexpJqlIssues<PSCustomObject>
#>
function ConvertFrom-JsonToJexpJqlIssues {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JexpJqlIssues' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JexpJqlIssues
        $AllProperties = ("maxResults", "query", "startAt", "validation")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxResults"))) { #optional property not found
            $MaxResults = $null
        } else {
            $MaxResults = $JsonParameters.PSobject.Properties["maxResults"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "query"))) { #optional property not found
            $Query = $null
        } else {
            $Query = $JsonParameters.PSobject.Properties["query"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startAt"))) { #optional property not found
            $StartAt = $null
        } else {
            $StartAt = $JsonParameters.PSobject.Properties["startAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validation"))) { #optional property not found
            $Validation = $null
        } else {
            $Validation = $JsonParameters.PSobject.Properties["validation"].value
        }

        $PSO = [PSCustomObject]@{
            "maxResults" = ${MaxResults}
            "query" = ${Query}
            "startAt" = ${StartAt}
            "validation" = ${Validation}
        }

        return $PSO
    }

}


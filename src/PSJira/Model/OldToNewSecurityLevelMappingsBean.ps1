#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER NewLevelId
The new issue security level ID. Providing null will clear the assigned old level from issues.
.PARAMETER OldLevelId
The old issue security level ID. Providing null will remap all issues without any assigned levels.
.OUTPUTS

OldToNewSecurityLevelMappingsBean<PSCustomObject>
#>

function Initialize-OldToNewSecurityLevelMappingsBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NewLevelId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OldLevelId}
    )

    Process {
        'Creating PSCustomObject: PSJira => OldToNewSecurityLevelMappingsBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $NewLevelId) {
            throw "invalid value for 'NewLevelId', 'NewLevelId' cannot be null."
        }

        if ($null -eq $OldLevelId) {
            throw "invalid value for 'OldLevelId', 'OldLevelId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "newLevelId" = ${NewLevelId}
            "oldLevelId" = ${OldLevelId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OldToNewSecurityLevelMappingsBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to OldToNewSecurityLevelMappingsBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OldToNewSecurityLevelMappingsBean<PSCustomObject>
#>
function ConvertFrom-JsonToOldToNewSecurityLevelMappingsBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => OldToNewSecurityLevelMappingsBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OldToNewSecurityLevelMappingsBean
        $AllProperties = ("newLevelId", "oldLevelId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'newLevelId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "newLevelId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'newLevelId' missing."
        } else {
            $NewLevelId = $JsonParameters.PSobject.Properties["newLevelId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "oldLevelId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'oldLevelId' missing."
        } else {
            $OldLevelId = $JsonParameters.PSobject.Properties["oldLevelId"].value
        }

        $PSO = [PSCustomObject]@{
            "newLevelId" = ${NewLevelId}
            "oldLevelId" = ${OldLevelId}
        }

        return $PSO
    }

}


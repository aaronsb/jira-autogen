#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a project type.

.PARAMETER Color
The color of the project type.
.PARAMETER DescriptionI18nKey
The key of the project type's description.
.PARAMETER FormattedKey
The formatted key of the project type.
.PARAMETER Icon
The icon of the project type.
.PARAMETER Key
The key of the project type.
.OUTPUTS

ProjectType<PSCustomObject>
#>

function Initialize-ProjectType {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Color},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DescriptionI18nKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormattedKey},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Icon},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key}
    )

    Process {
        'Creating PSCustomObject: PSJira => ProjectType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "color" = ${Color}
            "descriptionI18nKey" = ${DescriptionI18nKey}
            "formattedKey" = ${FormattedKey}
            "icon" = ${Icon}
            "key" = ${Key}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectType<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectType<PSCustomObject>
#>
function ConvertFrom-JsonToProjectType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ProjectType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectType
        $AllProperties = ("color", "descriptionI18nKey", "formattedKey", "icon", "key")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "color"))) { #optional property not found
            $Color = $null
        } else {
            $Color = $JsonParameters.PSobject.Properties["color"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "descriptionI18nKey"))) { #optional property not found
            $DescriptionI18nKey = $null
        } else {
            $DescriptionI18nKey = $JsonParameters.PSobject.Properties["descriptionI18nKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formattedKey"))) { #optional property not found
            $FormattedKey = $null
        } else {
            $FormattedKey = $JsonParameters.PSobject.Properties["formattedKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "icon"))) { #optional property not found
            $Icon = $null
        } else {
            $Icon = $JsonParameters.PSobject.Properties["icon"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        $PSO = [PSCustomObject]@{
            "color" = ${Color}
            "descriptionI18nKey" = ${DescriptionI18nKey}
            "formattedKey" = ${FormattedKey}
            "icon" = ${Icon}
            "key" = ${Key}
        }

        return $PSO
    }

}


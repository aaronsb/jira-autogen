#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Jql function precomputation.

.PARAMETER Arguments
The list of arguments function was invoked with.
.PARAMETER Created
The timestamp of the precomputation creation.
.PARAMETER VarError
The error message to be displayed to the user.
.PARAMETER Field
The field the function was executed against.
.PARAMETER FunctionKey
The function key.
.PARAMETER FunctionName
The name of the function.
.PARAMETER Id
The id of the precomputation.
.PARAMETER Operator
The operator in context of which function was executed.
.PARAMETER Updated
The timestamp of the precomputation last update.
.PARAMETER Used
The timestamp of the precomputation last usage.
.PARAMETER Value
The JQL fragment stored as the precomputation.
.OUTPUTS

JqlFunctionPrecomputationBean<PSCustomObject>
#>

function Initialize-JqlFunctionPrecomputationBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Arguments},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarError},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Field},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FunctionKey},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FunctionName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Operator},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Updated},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Used},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value}
    )

    Process {
        'Creating PSCustomObject: PSJira => JqlFunctionPrecomputationBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "arguments" = ${Arguments}
            "created" = ${Created}
            "error" = ${VarError}
            "field" = ${Field}
            "functionKey" = ${FunctionKey}
            "functionName" = ${FunctionName}
            "id" = ${Id}
            "operator" = ${Operator}
            "updated" = ${Updated}
            "used" = ${Used}
            "value" = ${Value}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JqlFunctionPrecomputationBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to JqlFunctionPrecomputationBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JqlFunctionPrecomputationBean<PSCustomObject>
#>
function ConvertFrom-JsonToJqlFunctionPrecomputationBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JqlFunctionPrecomputationBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JqlFunctionPrecomputationBean
        $AllProperties = ("arguments", "created", "error", "field", "functionKey", "functionName", "id", "operator", "updated", "used", "value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "arguments"))) { #optional property not found
            $Arguments = $null
        } else {
            $Arguments = $JsonParameters.PSobject.Properties["arguments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "error"))) { #optional property not found
            $VarError = $null
        } else {
            $VarError = $JsonParameters.PSobject.Properties["error"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "field"))) { #optional property not found
            $Field = $null
        } else {
            $Field = $JsonParameters.PSobject.Properties["field"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "functionKey"))) { #optional property not found
            $FunctionKey = $null
        } else {
            $FunctionKey = $JsonParameters.PSobject.Properties["functionKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "functionName"))) { #optional property not found
            $FunctionName = $null
        } else {
            $FunctionName = $JsonParameters.PSobject.Properties["functionName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operator"))) { #optional property not found
            $Operator = $null
        } else {
            $Operator = $JsonParameters.PSobject.Properties["operator"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated"))) { #optional property not found
            $Updated = $null
        } else {
            $Updated = $JsonParameters.PSobject.Properties["updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "used"))) { #optional property not found
            $Used = $null
        } else {
            $Used = $JsonParameters.PSobject.Properties["used"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        $PSO = [PSCustomObject]@{
            "arguments" = ${Arguments}
            "created" = ${Created}
            "error" = ${VarError}
            "field" = ${Field}
            "functionKey" = ${FunctionKey}
            "functionName" = ${FunctionName}
            "id" = ${Id}
            "operator" = ${Operator}
            "updated" = ${Updated}
            "used" = ${Used}
            "value" = ${Value}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a remote issue link.

.PARAMETER Application
Details of the remote application the linked item is in. For example, trello.
.PARAMETER GlobalId
An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.  The maximum length is 255 characters.
.PARAMETER Object
Details of the item linked to.
.PARAMETER Relationship
Description of the relationship between the issue and the linked item. If not set, the relationship description ""links to"" is used in Jira.
.OUTPUTS

RemoteIssueLinkRequest<PSCustomObject>
#>

function Initialize-RemoteIssueLinkRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Application},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GlobalId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Object},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Relationship}
    )

    Process {
        'Creating PSCustomObject: PSJira => RemoteIssueLinkRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Object) {
            throw "invalid value for 'Object', 'Object' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "application" = ${Application}
            "globalId" = ${GlobalId}
            "object" = ${Object}
            "relationship" = ${Relationship}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RemoteIssueLinkRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to RemoteIssueLinkRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RemoteIssueLinkRequest<PSCustomObject>
#>
function ConvertFrom-JsonToRemoteIssueLinkRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => RemoteIssueLinkRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $RemoteIssueLinkRequestAdditionalProperties = @{}

        # check if Json contains properties not defined in RemoteIssueLinkRequest
        $AllProperties = ("application", "globalId", "object", "relationship")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $RemoteIssueLinkRequestAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'object' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object' missing."
        } else {
            $Object = $JsonParameters.PSobject.Properties["object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "application"))) { #optional property not found
            $Application = $null
        } else {
            $Application = $JsonParameters.PSobject.Properties["application"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "globalId"))) { #optional property not found
            $GlobalId = $null
        } else {
            $GlobalId = $JsonParameters.PSobject.Properties["globalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "relationship"))) { #optional property not found
            $Relationship = $null
        } else {
            $Relationship = $JsonParameters.PSobject.Properties["relationship"].value
        }

        $PSO = [PSCustomObject]@{
            "application" = ${Application}
            "globalId" = ${GlobalId}
            "object" = ${Object}
            "relationship" = ${Relationship}
            "AdditionalProperties" = $RemoteIssueLinkRequestAdditionalProperties
        }

        return $PSO
    }

}


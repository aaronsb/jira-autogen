#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StatusMappingsByIssueTypes
The list of required status mappings by issue type.
.PARAMETER StatusMappingsByWorkflows
The list of required status mappings by workflow.
.PARAMETER Statuses
The details of the statuses in the associated workflows.
.PARAMETER StatusesPerWorkflow
The statuses associated with each workflow.
.OUTPUTS

WorkflowSchemeUpdateRequiredMappingsResponse<PSCustomObject>
#>

function Initialize-WorkflowSchemeUpdateRequiredMappingsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${StatusMappingsByIssueTypes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${StatusMappingsByWorkflows},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Statuses},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${StatusesPerWorkflow}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowSchemeUpdateRequiredMappingsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "statusMappingsByIssueTypes" = ${StatusMappingsByIssueTypes}
            "statusMappingsByWorkflows" = ${StatusMappingsByWorkflows}
            "statuses" = ${Statuses}
            "statusesPerWorkflow" = ${StatusesPerWorkflow}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowSchemeUpdateRequiredMappingsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowSchemeUpdateRequiredMappingsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowSchemeUpdateRequiredMappingsResponse<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowSchemeUpdateRequiredMappingsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowSchemeUpdateRequiredMappingsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowSchemeUpdateRequiredMappingsResponse
        $AllProperties = ("statusMappingsByIssueTypes", "statusMappingsByWorkflows", "statuses", "statusesPerWorkflow")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusMappingsByIssueTypes"))) { #optional property not found
            $StatusMappingsByIssueTypes = $null
        } else {
            $StatusMappingsByIssueTypes = $JsonParameters.PSobject.Properties["statusMappingsByIssueTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusMappingsByWorkflows"))) { #optional property not found
            $StatusMappingsByWorkflows = $null
        } else {
            $StatusMappingsByWorkflows = $JsonParameters.PSobject.Properties["statusMappingsByWorkflows"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statuses"))) { #optional property not found
            $Statuses = $null
        } else {
            $Statuses = $JsonParameters.PSobject.Properties["statuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusesPerWorkflow"))) { #optional property not found
            $StatusesPerWorkflow = $null
        } else {
            $StatusesPerWorkflow = $JsonParameters.PSobject.Properties["statusesPerWorkflow"].value
        }

        $PSO = [PSCustomObject]@{
            "statusMappingsByIssueTypes" = ${StatusMappingsByIssueTypes}
            "statusMappingsByWorkflows" = ${StatusMappingsByWorkflows}
            "statuses" = ${Statuses}
            "statusesPerWorkflow" = ${StatusesPerWorkflow}
        }

        return $PSO
    }

}


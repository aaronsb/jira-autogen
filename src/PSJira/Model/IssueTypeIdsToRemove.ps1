#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The list of issue type IDs to be removed from the field configuration scheme.

.PARAMETER IssueTypeIds
The list of issue type IDs. Must contain unique values not longer than 255 characters and not be empty. Maximum of 100 IDs.
.OUTPUTS

IssueTypeIdsToRemove<PSCustomObject>
#>

function Initialize-IssueTypeIdsToRemove {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IssueTypeIds}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueTypeIdsToRemove' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $IssueTypeIds) {
            throw "invalid value for 'IssueTypeIds', 'IssueTypeIds' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "issueTypeIds" = ${IssueTypeIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueTypeIdsToRemove<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueTypeIdsToRemove<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueTypeIdsToRemove<PSCustomObject>
#>
function ConvertFrom-JsonToIssueTypeIdsToRemove {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueTypeIdsToRemove' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueTypeIdsToRemove
        $AllProperties = ("issueTypeIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'issueTypeIds' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueTypeIds' missing."
        } else {
            $IssueTypeIds = $JsonParameters.PSobject.Properties["issueTypeIds"].value
        }

        $PSO = [PSCustomObject]@{
            "issueTypeIds" = ${IssueTypeIds}
        }

        return $PSO
    }

}


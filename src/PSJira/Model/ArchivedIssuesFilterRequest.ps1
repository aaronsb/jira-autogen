#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a filter for exporting archived issues.

.PARAMETER ArchivedBy
List archived issues archived by a specified account ID.
.PARAMETER ArchivedDateRange
No description available.
.PARAMETER IssueTypes
List archived issues with a specified issue type ID.
.PARAMETER Projects
List archived issues with a specified project key.
.PARAMETER Reporters
List archived issues where the reporter is a specified account ID.
.OUTPUTS

ArchivedIssuesFilterRequest<PSCustomObject>
#>

function Initialize-ArchivedIssuesFilterRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ArchivedBy},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ArchivedDateRange},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IssueTypes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Projects},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Reporters}
    )

    Process {
        'Creating PSCustomObject: PSJira => ArchivedIssuesFilterRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "archivedBy" = ${ArchivedBy}
            "archivedDateRange" = ${ArchivedDateRange}
            "issueTypes" = ${IssueTypes}
            "projects" = ${Projects}
            "reporters" = ${Reporters}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ArchivedIssuesFilterRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to ArchivedIssuesFilterRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ArchivedIssuesFilterRequest<PSCustomObject>
#>
function ConvertFrom-JsonToArchivedIssuesFilterRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ArchivedIssuesFilterRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $ArchivedIssuesFilterRequestAdditionalProperties = @{}

        # check if Json contains properties not defined in ArchivedIssuesFilterRequest
        $AllProperties = ("archivedBy", "archivedDateRange", "issueTypes", "projects", "reporters")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $ArchivedIssuesFilterRequestAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "archivedBy"))) { #optional property not found
            $ArchivedBy = $null
        } else {
            $ArchivedBy = $JsonParameters.PSobject.Properties["archivedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "archivedDateRange"))) { #optional property not found
            $ArchivedDateRange = $null
        } else {
            $ArchivedDateRange = $JsonParameters.PSobject.Properties["archivedDateRange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypes"))) { #optional property not found
            $IssueTypes = $null
        } else {
            $IssueTypes = $JsonParameters.PSobject.Properties["issueTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projects"))) { #optional property not found
            $Projects = $null
        } else {
            $Projects = $JsonParameters.PSobject.Properties["projects"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reporters"))) { #optional property not found
            $Reporters = $null
        } else {
            $Reporters = $JsonParameters.PSobject.Properties["reporters"].value
        }

        $PSO = [PSCustomObject]@{
            "archivedBy" = ${ArchivedBy}
            "archivedDateRange" = ${ArchivedDateRange}
            "issueTypes" = ${IssueTypes}
            "projects" = ${Projects}
            "reporters" = ${Reporters}
            "AdditionalProperties" = $ArchivedIssuesFilterRequestAdditionalProperties
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the scope of the default sharing for new filters and dashboards.

.PARAMETER Scope
The scope of the default sharing for new filters and dashboards:   *  `AUTHENTICATED` Shared with all logged-in users.  *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.  *  `PRIVATE` Not shared with any users.
.OUTPUTS

DefaultShareScope<PSCustomObject>
#>

function Initialize-DefaultShareScope {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("GLOBAL", "AUTHENTICATED", "PRIVATE")]
        [String]
        ${Scope}
    )

    Process {
        'Creating PSCustomObject: PSJira => DefaultShareScope' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Scope) {
            throw "invalid value for 'Scope', 'Scope' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "scope" = ${Scope}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DefaultShareScope<PSCustomObject>

.DESCRIPTION

Convert from JSON to DefaultShareScope<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DefaultShareScope<PSCustomObject>
#>
function ConvertFrom-JsonToDefaultShareScope {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => DefaultShareScope' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DefaultShareScope
        $AllProperties = ("scope")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'scope' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) {
            throw "Error! JSON cannot be serialized due to the required property 'scope' missing."
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        $PSO = [PSCustomObject]@{
            "scope" = ${Scope}
        }

        return $PSO
    }

}


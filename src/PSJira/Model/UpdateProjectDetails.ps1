#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about the project.

.PARAMETER AssigneeType
The default assignee when creating issues for this project.
.PARAMETER AvatarId
An integer value for the project's avatar.
.PARAMETER CategoryId
The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`
.PARAMETER Description
A brief description of the project.
.PARAMETER IssueSecurityScheme
The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
.PARAMETER Key
Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
.PARAMETER Lead
This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`.
.PARAMETER LeadAccountId
The account ID of the project lead. Cannot be provided with `lead`.
.PARAMETER Name
The name of the project.
.PARAMETER NotificationScheme
The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
.PARAMETER PermissionScheme
The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
.PARAMETER Url
A link to information about this project, such as project documentation
.OUTPUTS

UpdateProjectDetails<PSCustomObject>
#>

function Initialize-UpdateProjectDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PROJECT_LEAD", "UNASSIGNED")]
        [String]
        ${AssigneeType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AvatarId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CategoryId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IssueSecurityScheme},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Lead},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LeadAccountId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${NotificationScheme},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PermissionScheme},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url}
    )

    Process {
        'Creating PSCustomObject: PSJira => UpdateProjectDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$LeadAccountId -and $LeadAccountId.length -gt 128) {
            throw "invalid value for 'LeadAccountId', the character length must be smaller than or equal to 128."
        }


        $PSO = [PSCustomObject]@{
            "assigneeType" = ${AssigneeType}
            "avatarId" = ${AvatarId}
            "categoryId" = ${CategoryId}
            "description" = ${Description}
            "issueSecurityScheme" = ${IssueSecurityScheme}
            "key" = ${Key}
            "lead" = ${Lead}
            "leadAccountId" = ${LeadAccountId}
            "name" = ${Name}
            "notificationScheme" = ${NotificationScheme}
            "permissionScheme" = ${PermissionScheme}
            "url" = ${Url}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateProjectDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateProjectDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateProjectDetails<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateProjectDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => UpdateProjectDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateProjectDetails
        $AllProperties = ("assigneeType", "avatarId", "categoryId", "description", "issueSecurityScheme", "key", "lead", "leadAccountId", "name", "notificationScheme", "permissionScheme", "url")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigneeType"))) { #optional property not found
            $AssigneeType = $null
        } else {
            $AssigneeType = $JsonParameters.PSobject.Properties["assigneeType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avatarId"))) { #optional property not found
            $AvatarId = $null
        } else {
            $AvatarId = $JsonParameters.PSobject.Properties["avatarId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categoryId"))) { #optional property not found
            $CategoryId = $null
        } else {
            $CategoryId = $JsonParameters.PSobject.Properties["categoryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueSecurityScheme"))) { #optional property not found
            $IssueSecurityScheme = $null
        } else {
            $IssueSecurityScheme = $JsonParameters.PSobject.Properties["issueSecurityScheme"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lead"))) { #optional property not found
            $Lead = $null
        } else {
            $Lead = $JsonParameters.PSobject.Properties["lead"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "leadAccountId"))) { #optional property not found
            $LeadAccountId = $null
        } else {
            $LeadAccountId = $JsonParameters.PSobject.Properties["leadAccountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notificationScheme"))) { #optional property not found
            $NotificationScheme = $null
        } else {
            $NotificationScheme = $JsonParameters.PSobject.Properties["notificationScheme"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permissionScheme"))) { #optional property not found
            $PermissionScheme = $null
        } else {
            $PermissionScheme = $JsonParameters.PSobject.Properties["permissionScheme"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        $PSO = [PSCustomObject]@{
            "assigneeType" = ${AssigneeType}
            "avatarId" = ${AvatarId}
            "categoryId" = ${CategoryId}
            "description" = ${Description}
            "issueSecurityScheme" = ${IssueSecurityScheme}
            "key" = ${Key}
            "lead" = ${Lead}
            "leadAccountId" = ${LeadAccountId}
            "name" = ${Name}
            "notificationScheme" = ${NotificationScheme}
            "permissionScheme" = ${PermissionScheme}
            "url" = ${Url}
        }

        return $PSO
    }

}


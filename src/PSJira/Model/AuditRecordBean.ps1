#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An audit record.

.PARAMETER AssociatedItems
The list of items associated with the changed record.
.PARAMETER AuthorKey
Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.
.PARAMETER Category
The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).
.PARAMETER ChangedValues
The list of values changed in the record event.
.PARAMETER Created
The date and time on which the audit record was created.
.PARAMETER Description
The description of the audit record.
.PARAMETER EventSource
The event the audit record originated from.
.PARAMETER Id
The ID of the audit record.
.PARAMETER ObjectItem
No description available.
.PARAMETER RemoteAddress
The URL of the computer where the creation of the audit record was initiated.
.PARAMETER Summary
The summary of the audit record.
.OUTPUTS

AuditRecordBean<PSCustomObject>
#>

function Initialize-AuditRecordBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssociatedItems},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuthorKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ChangedValues},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EventSource},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ObjectItem},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoteAddress},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Summary}
    )

    Process {
        'Creating PSCustomObject: PSJira => AuditRecordBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "associatedItems" = ${AssociatedItems}
            "authorKey" = ${AuthorKey}
            "category" = ${Category}
            "changedValues" = ${ChangedValues}
            "created" = ${Created}
            "description" = ${Description}
            "eventSource" = ${EventSource}
            "id" = ${Id}
            "objectItem" = ${ObjectItem}
            "remoteAddress" = ${RemoteAddress}
            "summary" = ${Summary}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AuditRecordBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to AuditRecordBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AuditRecordBean<PSCustomObject>
#>
function ConvertFrom-JsonToAuditRecordBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => AuditRecordBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AuditRecordBean
        $AllProperties = ("associatedItems", "authorKey", "category", "changedValues", "created", "description", "eventSource", "id", "objectItem", "remoteAddress", "summary")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedItems"))) { #optional property not found
            $AssociatedItems = $null
        } else {
            $AssociatedItems = $JsonParameters.PSobject.Properties["associatedItems"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authorKey"))) { #optional property not found
            $AuthorKey = $null
        } else {
            $AuthorKey = $JsonParameters.PSobject.Properties["authorKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "changedValues"))) { #optional property not found
            $ChangedValues = $null
        } else {
            $ChangedValues = $JsonParameters.PSobject.Properties["changedValues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventSource"))) { #optional property not found
            $EventSource = $null
        } else {
            $EventSource = $JsonParameters.PSobject.Properties["eventSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "objectItem"))) { #optional property not found
            $ObjectItem = $null
        } else {
            $ObjectItem = $JsonParameters.PSobject.Properties["objectItem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "remoteAddress"))) { #optional property not found
            $RemoteAddress = $null
        } else {
            $RemoteAddress = $JsonParameters.PSobject.Properties["remoteAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "summary"))) { #optional property not found
            $Summary = $null
        } else {
            $Summary = $JsonParameters.PSobject.Properties["summary"].value
        }

        $PSO = [PSCustomObject]@{
            "associatedItems" = ${AssociatedItems}
            "authorKey" = ${AuthorKey}
            "category" = ${Category}
            "changedValues" = ${ChangedValues}
            "created" = ${Created}
            "description" = ${Description}
            "eventSource" = ${EventSource}
            "id" = ${Id}
            "objectItem" = ${ObjectItem}
            "remoteAddress" = ${RemoteAddress}
            "summary" = ${Summary}
        }

        return $PSO
    }

}


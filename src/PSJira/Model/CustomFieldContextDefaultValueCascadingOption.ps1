#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The default value for a cascading select custom field.

.PARAMETER CascadingOptionId
The ID of the default cascading option.
.PARAMETER ContextId
The ID of the context.
.PARAMETER OptionId
The ID of the default option.
.PARAMETER Type
No description available.
.OUTPUTS

CustomFieldContextDefaultValueCascadingOption<PSCustomObject>
#>

function Initialize-CustomFieldContextDefaultValueCascadingOption {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CascadingOptionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContextId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OptionId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSJira => CustomFieldContextDefaultValueCascadingOption' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ContextId) {
            throw "invalid value for 'ContextId', 'ContextId' cannot be null."
        }

        if ($null -eq $OptionId) {
            throw "invalid value for 'OptionId', 'OptionId' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "cascadingOptionId" = ${CascadingOptionId}
            "contextId" = ${ContextId}
            "optionId" = ${OptionId}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CustomFieldContextDefaultValueCascadingOption<PSCustomObject>

.DESCRIPTION

Convert from JSON to CustomFieldContextDefaultValueCascadingOption<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CustomFieldContextDefaultValueCascadingOption<PSCustomObject>
#>
function ConvertFrom-JsonToCustomFieldContextDefaultValueCascadingOption {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => CustomFieldContextDefaultValueCascadingOption' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CustomFieldContextDefaultValueCascadingOption
        $AllProperties = ("cascadingOptionId", "contextId", "optionId", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'contextId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contextId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'contextId' missing."
        } else {
            $ContextId = $JsonParameters.PSobject.Properties["contextId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'optionId' missing."
        } else {
            $OptionId = $JsonParameters.PSobject.Properties["optionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cascadingOptionId"))) { #optional property not found
            $CascadingOptionId = $null
        } else {
            $CascadingOptionId = $JsonParameters.PSobject.Properties["cascadingOptionId"].value
        }

        $PSO = [PSCustomObject]@{
            "cascadingOptionId" = ${CascadingOptionId}
            "contextId" = ${ContextId}
            "optionId" = ${OptionId}
            "type" = ${Type}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an entity property.

.PARAMETER Entity
The object on which the property is set.
.PARAMETER Key
The key of the property.
.PARAMETER Path
The path in the property value to query.
.PARAMETER Type
The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
.OUTPUTS

JqlQueryFieldEntityProperty<PSCustomObject>
#>

function Initialize-JqlQueryFieldEntityProperty {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Entity},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Path},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("number", "string", "text", "date", "user")]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSJira => JqlQueryFieldEntityProperty' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Entity) {
            throw "invalid value for 'Entity', 'Entity' cannot be null."
        }

        if ($null -eq $Key) {
            throw "invalid value for 'Key', 'Key' cannot be null."
        }

        if ($null -eq $Path) {
            throw "invalid value for 'Path', 'Path' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "entity" = ${Entity}
            "key" = ${Key}
            "path" = ${Path}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JqlQueryFieldEntityProperty<PSCustomObject>

.DESCRIPTION

Convert from JSON to JqlQueryFieldEntityProperty<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JqlQueryFieldEntityProperty<PSCustomObject>
#>
function ConvertFrom-JsonToJqlQueryFieldEntityProperty {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JqlQueryFieldEntityProperty' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JqlQueryFieldEntityProperty
        $AllProperties = ("entity", "key", "path", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'entity' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entity"))) {
            throw "Error! JSON cannot be serialized due to the required property 'entity' missing."
        } else {
            $Entity = $JsonParameters.PSobject.Properties["entity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) {
            throw "Error! JSON cannot be serialized due to the required property 'key' missing."
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "path"))) {
            throw "Error! JSON cannot be serialized due to the required property 'path' missing."
        } else {
            $Path = $JsonParameters.PSobject.Properties["path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "entity" = ${Entity}
            "key" = ${Key}
            "path" = ${Path}
            "type" = ${Type}
        }

        return $PSO
    }

}


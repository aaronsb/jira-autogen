#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a worklog.

.PARAMETER Author
No description available.
.PARAMETER Comment
A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog.
.PARAMETER Created
The datetime on which the worklog was created.
.PARAMETER Id
The ID of the worklog record.
.PARAMETER IssueId
The ID of the issue this worklog is for.
.PARAMETER Properties
Details of properties for the worklog. Optional when creating or updating a worklog.
.PARAMETER Self
The URL of the worklog item.
.PARAMETER Started
The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
.PARAMETER TimeSpent
The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
.PARAMETER TimeSpentSeconds
The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
.PARAMETER UpdateAuthor
No description available.
.PARAMETER Updated
The datetime on which the worklog was last updated.
.PARAMETER Visibility
Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.
.OUTPUTS

Worklog<PSCustomObject>
#>

function Initialize-Worklog {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Author},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Comment},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Properties},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Started},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TimeSpent},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimeSpentSeconds},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UpdateAuthor},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Updated},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Visibility}
    )

    Process {
        'Creating PSCustomObject: PSJira => Worklog' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "author" = ${Author}
            "comment" = ${Comment}
            "created" = ${Created}
            "id" = ${Id}
            "issueId" = ${IssueId}
            "properties" = ${Properties}
            "self" = ${Self}
            "started" = ${Started}
            "timeSpent" = ${TimeSpent}
            "timeSpentSeconds" = ${TimeSpentSeconds}
            "updateAuthor" = ${UpdateAuthor}
            "updated" = ${Updated}
            "visibility" = ${Visibility}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Worklog<PSCustomObject>

.DESCRIPTION

Convert from JSON to Worklog<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Worklog<PSCustomObject>
#>
function ConvertFrom-JsonToWorklog {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Worklog' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $WorklogAdditionalProperties = @{}

        # check if Json contains properties not defined in Worklog
        $AllProperties = ("author", "comment", "created", "id", "issueId", "properties", "self", "started", "timeSpent", "timeSpentSeconds", "updateAuthor", "updated", "visibility")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $WorklogAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "author"))) { #optional property not found
            $Author = $null
        } else {
            $Author = $JsonParameters.PSobject.Properties["author"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueId"))) { #optional property not found
            $IssueId = $null
        } else {
            $IssueId = $JsonParameters.PSobject.Properties["issueId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "started"))) { #optional property not found
            $Started = $null
        } else {
            $Started = $JsonParameters.PSobject.Properties["started"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeSpent"))) { #optional property not found
            $TimeSpent = $null
        } else {
            $TimeSpent = $JsonParameters.PSobject.Properties["timeSpent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeSpentSeconds"))) { #optional property not found
            $TimeSpentSeconds = $null
        } else {
            $TimeSpentSeconds = $JsonParameters.PSobject.Properties["timeSpentSeconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateAuthor"))) { #optional property not found
            $UpdateAuthor = $null
        } else {
            $UpdateAuthor = $JsonParameters.PSobject.Properties["updateAuthor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated"))) { #optional property not found
            $Updated = $null
        } else {
            $Updated = $JsonParameters.PSobject.Properties["updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        $PSO = [PSCustomObject]@{
            "author" = ${Author}
            "comment" = ${Comment}
            "created" = ${Created}
            "id" = ${Id}
            "issueId" = ${IssueId}
            "properties" = ${Properties}
            "self" = ${Self}
            "started" = ${Started}
            "timeSpent" = ${TimeSpent}
            "timeSpentSeconds" = ${TimeSpentSeconds}
            "updateAuthor" = ${UpdateAuthor}
            "updated" = ${Updated}
            "visibility" = ${Visibility}
            "AdditionalProperties" = $WorklogAdditionalProperties
        }

        return $PSO
    }

}


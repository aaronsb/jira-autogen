#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a status.

.PARAMETER Description
The description of the status.
.PARAMETER Id
The ID of the status.
.PARAMETER Name
The name of the status.
.PARAMETER Scope
No description available.
.PARAMETER StatusCategory
The category of the status.
.PARAMETER Usages
Projects and issue types where the status is used. Only available if the `usages` expand is requested.
.PARAMETER WorkflowUsages
The workflows that use this status. Only available if the `workflowUsages` expand is requested.
.OUTPUTS

JiraStatus<PSCustomObject>
#>

function Initialize-JiraStatus {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scope},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TODO", "IN_PROGRESS", "DONE")]
        [String]
        ${StatusCategory},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Usages},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${WorkflowUsages}
    )

    Process {
        'Creating PSCustomObject: PSJira => JiraStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "scope" = ${Scope}
            "statusCategory" = ${StatusCategory}
            "usages" = ${Usages}
            "workflowUsages" = ${WorkflowUsages}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JiraStatus<PSCustomObject>

.DESCRIPTION

Convert from JSON to JiraStatus<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JiraStatus<PSCustomObject>
#>
function ConvertFrom-JsonToJiraStatus {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JiraStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JiraStatus
        $AllProperties = ("description", "id", "name", "scope", "statusCategory", "usages", "workflowUsages")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusCategory"))) { #optional property not found
            $StatusCategory = $null
        } else {
            $StatusCategory = $JsonParameters.PSobject.Properties["statusCategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usages"))) { #optional property not found
            $Usages = $null
        } else {
            $Usages = $JsonParameters.PSobject.Properties["usages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workflowUsages"))) { #optional property not found
            $WorkflowUsages = $null
        } else {
            $WorkflowUsages = $JsonParameters.PSobject.Properties["workflowUsages"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "scope" = ${Scope}
            "statusCategory" = ${StatusCategory}
            "usages" = ${Usages}
            "workflowUsages" = ${WorkflowUsages}
        }

        return $PSO
    }

}


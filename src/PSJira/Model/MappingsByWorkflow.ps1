#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.

.PARAMETER NewWorkflowId
The ID of the new workflow.
.PARAMETER OldWorkflowId
The ID of the old workflow.
.PARAMETER StatusMappings
The list of status mappings.
.OUTPUTS

MappingsByWorkflow<PSCustomObject>
#>

function Initialize-MappingsByWorkflow {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NewWorkflowId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OldWorkflowId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${StatusMappings}
    )

    Process {
        'Creating PSCustomObject: PSJira => MappingsByWorkflow' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $NewWorkflowId) {
            throw "invalid value for 'NewWorkflowId', 'NewWorkflowId' cannot be null."
        }

        if ($null -eq $OldWorkflowId) {
            throw "invalid value for 'OldWorkflowId', 'OldWorkflowId' cannot be null."
        }

        if ($null -eq $StatusMappings) {
            throw "invalid value for 'StatusMappings', 'StatusMappings' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "newWorkflowId" = ${NewWorkflowId}
            "oldWorkflowId" = ${OldWorkflowId}
            "statusMappings" = ${StatusMappings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MappingsByWorkflow<PSCustomObject>

.DESCRIPTION

Convert from JSON to MappingsByWorkflow<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MappingsByWorkflow<PSCustomObject>
#>
function ConvertFrom-JsonToMappingsByWorkflow {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => MappingsByWorkflow' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MappingsByWorkflow
        $AllProperties = ("newWorkflowId", "oldWorkflowId", "statusMappings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'newWorkflowId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "newWorkflowId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'newWorkflowId' missing."
        } else {
            $NewWorkflowId = $JsonParameters.PSobject.Properties["newWorkflowId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "oldWorkflowId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'oldWorkflowId' missing."
        } else {
            $OldWorkflowId = $JsonParameters.PSobject.Properties["oldWorkflowId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusMappings"))) {
            throw "Error! JSON cannot be serialized due to the required property 'statusMappings' missing."
        } else {
            $StatusMappings = $JsonParameters.PSobject.Properties["statusMappings"].value
        }

        $PSO = [PSCustomObject]@{
            "newWorkflowId" = ${NewWorkflowId}
            "oldWorkflowId" = ${OldWorkflowId}
            "statusMappings" = ${StatusMappings}
        }

        return $PSO
    }

}


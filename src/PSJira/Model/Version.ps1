#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a project version.

.PARAMETER Approvers
If the expand option `approvers` is used, returns a list containing the approvers for this version.
.PARAMETER Archived
Indicates that the version is archived. Optional when creating or updating a version.
.PARAMETER Description
The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.
.PARAMETER Driver
If the expand option `driver` is used, returns the Atlassian account ID of the driver.
.PARAMETER Expand
Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  `driver` Returns the Atlassian account ID of the version driver.  *  `approvers` Returns a list containing approvers for this version.  Optional for create and update.
.PARAMETER Id
The ID of the version.
.PARAMETER IssuesStatusForFixVersion
No description available.
.PARAMETER MoveUnfixedIssuesTo
The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
.PARAMETER Name
The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
.PARAMETER Operations
If the expand option `operations` is used, returns the list of operations available for this version.
.PARAMETER Overdue
Indicates that the version is overdue.
.PARAMETER Project
Deprecated. Use `projectId`.
.PARAMETER ProjectId
The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
.PARAMETER ReleaseDate
The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
.PARAMETER Released
Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
.PARAMETER Self
The URL of the version.
.PARAMETER StartDate
The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
.PARAMETER UserReleaseDate
The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
.PARAMETER UserStartDate
The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
.OUTPUTS

Version<PSCustomObject>
#>

function Initialize-Version {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Approvers},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Archived},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Driver},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expand},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IssuesStatusForFixVersion},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MoveUnfixedIssuesTo},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Operations},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Overdue},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Project},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ProjectId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ReleaseDate},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Released},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserReleaseDate},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserStartDate}
    )

    Process {
        'Creating PSCustomObject: PSJira => Version' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "approvers" = ${Approvers}
            "archived" = ${Archived}
            "description" = ${Description}
            "driver" = ${Driver}
            "expand" = ${Expand}
            "id" = ${Id}
            "issuesStatusForFixVersion" = ${IssuesStatusForFixVersion}
            "moveUnfixedIssuesTo" = ${MoveUnfixedIssuesTo}
            "name" = ${Name}
            "operations" = ${Operations}
            "overdue" = ${Overdue}
            "project" = ${Project}
            "projectId" = ${ProjectId}
            "releaseDate" = ${ReleaseDate}
            "released" = ${Released}
            "self" = ${Self}
            "startDate" = ${StartDate}
            "userReleaseDate" = ${UserReleaseDate}
            "userStartDate" = ${UserStartDate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Version<PSCustomObject>

.DESCRIPTION

Convert from JSON to Version<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Version<PSCustomObject>
#>
function ConvertFrom-JsonToVersion {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Version' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Version
        $AllProperties = ("approvers", "archived", "description", "driver", "expand", "id", "issuesStatusForFixVersion", "moveUnfixedIssuesTo", "name", "operations", "overdue", "project", "projectId", "releaseDate", "released", "self", "startDate", "userReleaseDate", "userStartDate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approvers"))) { #optional property not found
            $Approvers = $null
        } else {
            $Approvers = $JsonParameters.PSobject.Properties["approvers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "archived"))) { #optional property not found
            $Archived = $null
        } else {
            $Archived = $JsonParameters.PSobject.Properties["archived"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "driver"))) { #optional property not found
            $Driver = $null
        } else {
            $Driver = $JsonParameters.PSobject.Properties["driver"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expand"))) { #optional property not found
            $Expand = $null
        } else {
            $Expand = $JsonParameters.PSobject.Properties["expand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuesStatusForFixVersion"))) { #optional property not found
            $IssuesStatusForFixVersion = $null
        } else {
            $IssuesStatusForFixVersion = $JsonParameters.PSobject.Properties["issuesStatusForFixVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moveUnfixedIssuesTo"))) { #optional property not found
            $MoveUnfixedIssuesTo = $null
        } else {
            $MoveUnfixedIssuesTo = $JsonParameters.PSobject.Properties["moveUnfixedIssuesTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operations"))) { #optional property not found
            $Operations = $null
        } else {
            $Operations = $JsonParameters.PSobject.Properties["operations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "overdue"))) { #optional property not found
            $Overdue = $null
        } else {
            $Overdue = $JsonParameters.PSobject.Properties["overdue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "project"))) { #optional property not found
            $Project = $null
        } else {
            $Project = $JsonParameters.PSobject.Properties["project"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) { #optional property not found
            $ProjectId = $null
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "releaseDate"))) { #optional property not found
            $ReleaseDate = $null
        } else {
            $ReleaseDate = $JsonParameters.PSobject.Properties["releaseDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "released"))) { #optional property not found
            $Released = $null
        } else {
            $Released = $JsonParameters.PSobject.Properties["released"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userReleaseDate"))) { #optional property not found
            $UserReleaseDate = $null
        } else {
            $UserReleaseDate = $JsonParameters.PSobject.Properties["userReleaseDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userStartDate"))) { #optional property not found
            $UserStartDate = $null
        } else {
            $UserStartDate = $JsonParameters.PSobject.Properties["userStartDate"].value
        }

        $PSO = [PSCustomObject]@{
            "approvers" = ${Approvers}
            "archived" = ${Archived}
            "description" = ${Description}
            "driver" = ${Driver}
            "expand" = ${Expand}
            "id" = ${Id}
            "issuesStatusForFixVersion" = ${IssuesStatusForFixVersion}
            "moveUnfixedIssuesTo" = ${MoveUnfixedIssuesTo}
            "name" = ${Name}
            "operations" = ${Operations}
            "overdue" = ${Overdue}
            "project" = ${Project}
            "projectId" = ${ProjectId}
            "releaseDate" = ${ReleaseDate}
            "released" = ${Released}
            "self" = ${Self}
            "startDate" = ${StartDate}
            "userReleaseDate" = ${UserReleaseDate}
            "userStartDate" = ${UserStartDate}
        }

        return $PSO
    }

}


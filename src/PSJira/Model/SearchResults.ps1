#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The result of a JQL search.

.PARAMETER Expand
Expand options that include additional search result details in the response.
.PARAMETER Issues
The list of issues found by the search.
.PARAMETER MaxResults
The maximum number of results that could be on the page.
.PARAMETER Names
The ID and name of each field in the search results.
.PARAMETER Schema
The schema describing the field types in the search results.
.PARAMETER StartAt
The index of the first item returned on the page.
.PARAMETER Total
The number of results on the page.
.PARAMETER WarningMessages
Any warnings related to the JQL query.
.OUTPUTS

SearchResults<PSCustomObject>
#>

function Initialize-SearchResults {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expand},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Issues},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxResults},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Names},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Schema},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StartAt},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Total},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${WarningMessages}
    )

    Process {
        'Creating PSCustomObject: PSJira => SearchResults' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "expand" = ${Expand}
            "issues" = ${Issues}
            "maxResults" = ${MaxResults}
            "names" = ${Names}
            "schema" = ${Schema}
            "startAt" = ${StartAt}
            "total" = ${Total}
            "warningMessages" = ${WarningMessages}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SearchResults<PSCustomObject>

.DESCRIPTION

Convert from JSON to SearchResults<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SearchResults<PSCustomObject>
#>
function ConvertFrom-JsonToSearchResults {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => SearchResults' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SearchResults
        $AllProperties = ("expand", "issues", "maxResults", "names", "schema", "startAt", "total", "warningMessages")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expand"))) { #optional property not found
            $Expand = $null
        } else {
            $Expand = $JsonParameters.PSobject.Properties["expand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issues"))) { #optional property not found
            $Issues = $null
        } else {
            $Issues = $JsonParameters.PSobject.Properties["issues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxResults"))) { #optional property not found
            $MaxResults = $null
        } else {
            $MaxResults = $JsonParameters.PSobject.Properties["maxResults"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "names"))) { #optional property not found
            $Names = $null
        } else {
            $Names = $JsonParameters.PSobject.Properties["names"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schema"))) { #optional property not found
            $Schema = $null
        } else {
            $Schema = $JsonParameters.PSobject.Properties["schema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startAt"))) { #optional property not found
            $StartAt = $null
        } else {
            $StartAt = $JsonParameters.PSobject.Properties["startAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) { #optional property not found
            $Total = $null
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warningMessages"))) { #optional property not found
            $WarningMessages = $null
        } else {
            $WarningMessages = $JsonParameters.PSobject.Properties["warningMessages"].value
        }

        $PSO = [PSCustomObject]@{
            "expand" = ${Expand}
            "issues" = ${Issues}
            "maxResults" = ${MaxResults}
            "names" = ${Names}
            "schema" = ${Schema}
            "startAt" = ${StartAt}
            "total" = ${Total}
            "warningMessages" = ${WarningMessages}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about the configuration of Jira.

.PARAMETER AttachmentsEnabled
Whether the ability to add attachments to issues is enabled.
.PARAMETER IssueLinkingEnabled
Whether the ability to link issues is enabled.
.PARAMETER SubTasksEnabled
Whether the ability to create subtasks for issues is enabled.
.PARAMETER TimeTrackingConfiguration
No description available.
.PARAMETER TimeTrackingEnabled
Whether the ability to track time is enabled. This property is deprecated.
.PARAMETER UnassignedIssuesAllowed
Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
.PARAMETER VotingEnabled
Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
.PARAMETER WatchingEnabled
Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
.OUTPUTS

Configuration<PSCustomObject>
#>

function Initialize-Configuration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AttachmentsEnabled},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IssueLinkingEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SubTasksEnabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TimeTrackingConfiguration},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TimeTrackingEnabled},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UnassignedIssuesAllowed},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${VotingEnabled},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${WatchingEnabled}
    )

    Process {
        'Creating PSCustomObject: PSJira => Configuration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "attachmentsEnabled" = ${AttachmentsEnabled}
            "issueLinkingEnabled" = ${IssueLinkingEnabled}
            "subTasksEnabled" = ${SubTasksEnabled}
            "timeTrackingConfiguration" = ${TimeTrackingConfiguration}
            "timeTrackingEnabled" = ${TimeTrackingEnabled}
            "unassignedIssuesAllowed" = ${UnassignedIssuesAllowed}
            "votingEnabled" = ${VotingEnabled}
            "watchingEnabled" = ${WatchingEnabled}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Configuration<PSCustomObject>

.DESCRIPTION

Convert from JSON to Configuration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Configuration<PSCustomObject>
#>
function ConvertFrom-JsonToConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Configuration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Configuration
        $AllProperties = ("attachmentsEnabled", "issueLinkingEnabled", "subTasksEnabled", "timeTrackingConfiguration", "timeTrackingEnabled", "unassignedIssuesAllowed", "votingEnabled", "watchingEnabled")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attachmentsEnabled"))) { #optional property not found
            $AttachmentsEnabled = $null
        } else {
            $AttachmentsEnabled = $JsonParameters.PSobject.Properties["attachmentsEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueLinkingEnabled"))) { #optional property not found
            $IssueLinkingEnabled = $null
        } else {
            $IssueLinkingEnabled = $JsonParameters.PSobject.Properties["issueLinkingEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subTasksEnabled"))) { #optional property not found
            $SubTasksEnabled = $null
        } else {
            $SubTasksEnabled = $JsonParameters.PSobject.Properties["subTasksEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeTrackingConfiguration"))) { #optional property not found
            $TimeTrackingConfiguration = $null
        } else {
            $TimeTrackingConfiguration = $JsonParameters.PSobject.Properties["timeTrackingConfiguration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeTrackingEnabled"))) { #optional property not found
            $TimeTrackingEnabled = $null
        } else {
            $TimeTrackingEnabled = $JsonParameters.PSobject.Properties["timeTrackingEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unassignedIssuesAllowed"))) { #optional property not found
            $UnassignedIssuesAllowed = $null
        } else {
            $UnassignedIssuesAllowed = $JsonParameters.PSobject.Properties["unassignedIssuesAllowed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "votingEnabled"))) { #optional property not found
            $VotingEnabled = $null
        } else {
            $VotingEnabled = $JsonParameters.PSobject.Properties["votingEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "watchingEnabled"))) { #optional property not found
            $WatchingEnabled = $null
        } else {
            $WatchingEnabled = $JsonParameters.PSobject.Properties["watchingEnabled"].value
        }

        $PSO = [PSCustomObject]@{
            "attachmentsEnabled" = ${AttachmentsEnabled}
            "issueLinkingEnabled" = ${IssueLinkingEnabled}
            "subTasksEnabled" = ${SubTasksEnabled}
            "timeTrackingConfiguration" = ${TimeTrackingConfiguration}
            "timeTrackingEnabled" = ${TimeTrackingEnabled}
            "unassignedIssuesAllowed" = ${UnassignedIssuesAllowed}
            "votingEnabled" = ${VotingEnabled}
            "watchingEnabled" = ${WatchingEnabled}
        }

        return $PSO
    }

}


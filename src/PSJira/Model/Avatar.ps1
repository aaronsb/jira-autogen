#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an avatar.

.PARAMETER FileName
The file name of the avatar icon. Returned for system avatars.
.PARAMETER Id
The ID of the avatar.
.PARAMETER IsDeletable
Whether the avatar can be deleted.
.PARAMETER IsSelected
Whether the avatar is used in Jira. For example, shown as a project's avatar.
.PARAMETER IsSystemAvatar
Whether the avatar is a system avatar.
.PARAMETER Owner
The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
.PARAMETER Urls
The list of avatar icon URLs.
.OUTPUTS

Avatar<PSCustomObject>
#>

function Initialize-Avatar {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDeletable},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSelected},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSystemAvatar},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Owner},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Urls}
    )

    Process {
        'Creating PSCustomObject: PSJira => Avatar' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "fileName" = ${FileName}
            "id" = ${Id}
            "isDeletable" = ${IsDeletable}
            "isSelected" = ${IsSelected}
            "isSystemAvatar" = ${IsSystemAvatar}
            "owner" = ${Owner}
            "urls" = ${Urls}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Avatar<PSCustomObject>

.DESCRIPTION

Convert from JSON to Avatar<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Avatar<PSCustomObject>
#>
function ConvertFrom-JsonToAvatar {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Avatar' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $AvatarAdditionalProperties = @{}

        # check if Json contains properties not defined in Avatar
        $AllProperties = ("fileName", "id", "isDeletable", "isSelected", "isSystemAvatar", "owner", "urls")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $AvatarAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileName"))) { #optional property not found
            $FileName = $null
        } else {
            $FileName = $JsonParameters.PSobject.Properties["fileName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDeletable"))) { #optional property not found
            $IsDeletable = $null
        } else {
            $IsDeletable = $JsonParameters.PSobject.Properties["isDeletable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isSelected"))) { #optional property not found
            $IsSelected = $null
        } else {
            $IsSelected = $JsonParameters.PSobject.Properties["isSelected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isSystemAvatar"))) { #optional property not found
            $IsSystemAvatar = $null
        } else {
            $IsSystemAvatar = $JsonParameters.PSobject.Properties["isSystemAvatar"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "urls"))) { #optional property not found
            $Urls = $null
        } else {
            $Urls = $JsonParameters.PSobject.Properties["urls"].value
        }

        $PSO = [PSCustomObject]@{
            "fileName" = ${FileName}
            "id" = ${Id}
            "isDeletable" = ${IsDeletable}
            "isSelected" = ${IsSelected}
            "isSystemAvatar" = ${IsSystemAvatar}
            "owner" = ${Owner}
            "urls" = ${Urls}
            "AdditionalProperties" = $AvatarAdditionalProperties
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A custom field and its new value with a list of issue to update.

.PARAMETER CustomField
The ID or key of the custom field. For example, `customfield_10010`.
.PARAMETER IssueIds
The list of issue IDs.
.PARAMETER Value
The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:   *  `string` the value must be a string.  *  `number` the value must be a number.  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `""2023-01-18T12:00:00-03:00""` or `""2023-01-18T12:00:00.000Z""`. However, the milliseconds part is ignored.  *  `user` the value must be an object that contains the `accountId` field.  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.  A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
.OUTPUTS

MultipleCustomFieldValuesUpdate<PSCustomObject>
#>

function Initialize-MultipleCustomFieldValuesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomField},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${IssueIds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Value}
    )

    Process {
        'Creating PSCustomObject: PSJira => MultipleCustomFieldValuesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CustomField) {
            throw "invalid value for 'CustomField', 'CustomField' cannot be null."
        }

        if ($null -eq $IssueIds) {
            throw "invalid value for 'IssueIds', 'IssueIds' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "customField" = ${CustomField}
            "issueIds" = ${IssueIds}
            "value" = ${Value}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MultipleCustomFieldValuesUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to MultipleCustomFieldValuesUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MultipleCustomFieldValuesUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToMultipleCustomFieldValuesUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => MultipleCustomFieldValuesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MultipleCustomFieldValuesUpdate
        $AllProperties = ("customField", "issueIds", "value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'customField' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customField"))) {
            throw "Error! JSON cannot be serialized due to the required property 'customField' missing."
        } else {
            $CustomField = $JsonParameters.PSobject.Properties["customField"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueIds' missing."
        } else {
            $IssueIds = $JsonParameters.PSobject.Properties["issueIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) {
            throw "Error! JSON cannot be serialized due to the required property 'value' missing."
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        $PSO = [PSCustomObject]@{
            "customField" = ${CustomField}
            "issueIds" = ${IssueIds}
            "value" = ${Value}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a gadget.

.PARAMETER Color
The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
.PARAMETER Id
The ID of the gadget instance.
.PARAMETER ModuleKey
The module key of the gadget type.
.PARAMETER Position
No description available.
.PARAMETER Title
The title of the gadget.
.PARAMETER Uri
The URI of the gadget type.
.OUTPUTS

DashboardGadget<PSCustomObject>
#>

function Initialize-DashboardGadget {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("blue", "red", "yellow", "green", "cyan", "purple", "gray", "white")]
        [String]
        ${Color},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModuleKey},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Position},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uri}
    )

    Process {
        'Creating PSCustomObject: PSJira => DashboardGadget' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Color) {
            throw "invalid value for 'Color', 'Color' cannot be null."
        }

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Position) {
            throw "invalid value for 'Position', 'Position' cannot be null."
        }

        if ($null -eq $Title) {
            throw "invalid value for 'Title', 'Title' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "color" = ${Color}
            "id" = ${Id}
            "moduleKey" = ${ModuleKey}
            "position" = ${Position}
            "title" = ${Title}
            "uri" = ${Uri}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DashboardGadget<PSCustomObject>

.DESCRIPTION

Convert from JSON to DashboardGadget<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DashboardGadget<PSCustomObject>
#>
function ConvertFrom-JsonToDashboardGadget {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => DashboardGadget' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DashboardGadget
        $AllProperties = ("color", "id", "moduleKey", "position", "title", "uri")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'color' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "color"))) {
            throw "Error! JSON cannot be serialized due to the required property 'color' missing."
        } else {
            $Color = $JsonParameters.PSobject.Properties["color"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) {
            throw "Error! JSON cannot be serialized due to the required property 'position' missing."
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) {
            throw "Error! JSON cannot be serialized due to the required property 'title' missing."
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleKey"))) { #optional property not found
            $ModuleKey = $null
        } else {
            $ModuleKey = $JsonParameters.PSobject.Properties["moduleKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uri"))) { #optional property not found
            $Uri = $null
        } else {
            $Uri = $JsonParameters.PSobject.Properties["uri"].value
        }

        $PSO = [PSCustomObject]@{
            "color" = ${Color}
            "id" = ${Id}
            "moduleKey" = ${ModuleKey}
            "position" = ${Position}
            "title" = ${Title}
            "uri" = ${Uri}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

List of project avatars.

.PARAMETER Custom
List of avatars added to Jira. These avatars may be deleted.
.PARAMETER System
List of avatars included with Jira. These avatars cannot be deleted.
.OUTPUTS

ProjectAvatars<PSCustomObject>
#>

function Initialize-ProjectAvatars {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Custom},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${System}
    )

    Process {
        'Creating PSCustomObject: PSJira => ProjectAvatars' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "custom" = ${Custom}
            "system" = ${System}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectAvatars<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectAvatars<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectAvatars<PSCustomObject>
#>
function ConvertFrom-JsonToProjectAvatars {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ProjectAvatars' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectAvatars
        $AllProperties = ("custom", "system")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom"))) { #optional property not found
            $Custom = $null
        } else {
            $Custom = $JsonParameters.PSobject.Properties["custom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system"))) { #optional property not found
            $System = $null
        } else {
            $System = $JsonParameters.PSobject.Properties["system"].value
        }

        $PSO = [PSCustomObject]@{
            "custom" = ${Custom}
            "system" = ${System}
        }

        return $PSO
    }

}


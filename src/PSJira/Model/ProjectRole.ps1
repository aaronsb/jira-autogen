#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about the roles in a project.

.PARAMETER Actors
The list of users who act in this role.
.PARAMETER Admin
Whether this role is the admin role for the project.
.PARAMETER CurrentUserRole
Whether the calling user is part of this role.
.PARAMETER Default
Whether this role is the default role for the project
.PARAMETER Description
The description of the project role.
.PARAMETER Id
The ID of the project role.
.PARAMETER Name
The name of the project role.
.PARAMETER RoleConfigurable
Whether the roles are configurable for this project.
.PARAMETER Scope
No description available.
.PARAMETER Self
The URL the project role details.
.PARAMETER TranslatedName
The translated name of the project role.
.OUTPUTS

ProjectRole<PSCustomObject>
#>

function Initialize-ProjectRole {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Actors},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Admin},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CurrentUserRole},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Default},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RoleConfigurable},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scope},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TranslatedName}
    )

    Process {
        'Creating PSCustomObject: PSJira => ProjectRole' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "actors" = ${Actors}
            "admin" = ${Admin}
            "currentUserRole" = ${CurrentUserRole}
            "default" = ${Default}
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "roleConfigurable" = ${RoleConfigurable}
            "scope" = ${Scope}
            "self" = ${Self}
            "translatedName" = ${TranslatedName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectRole<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectRole<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectRole<PSCustomObject>
#>
function ConvertFrom-JsonToProjectRole {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ProjectRole' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectRole
        $AllProperties = ("actors", "admin", "currentUserRole", "default", "description", "id", "name", "roleConfigurable", "scope", "self", "translatedName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actors"))) { #optional property not found
            $Actors = $null
        } else {
            $Actors = $JsonParameters.PSobject.Properties["actors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "admin"))) { #optional property not found
            $Admin = $null
        } else {
            $Admin = $JsonParameters.PSobject.Properties["admin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currentUserRole"))) { #optional property not found
            $CurrentUserRole = $null
        } else {
            $CurrentUserRole = $JsonParameters.PSobject.Properties["currentUserRole"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default"))) { #optional property not found
            $Default = $null
        } else {
            $Default = $JsonParameters.PSobject.Properties["default"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roleConfigurable"))) { #optional property not found
            $RoleConfigurable = $null
        } else {
            $RoleConfigurable = $JsonParameters.PSobject.Properties["roleConfigurable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "translatedName"))) { #optional property not found
            $TranslatedName = $null
        } else {
            $TranslatedName = $JsonParameters.PSobject.Properties["translatedName"].value
        }

        $PSO = [PSCustomObject]@{
            "actors" = ${Actors}
            "admin" = ${Admin}
            "currentUserRole" = ${CurrentUserRole}
            "default" = ${Default}
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "roleConfigurable" = ${RoleConfigurable}
            "scope" = ${Scope}
            "self" = ${Self}
            "translatedName" = ${TranslatedName}
        }

        return $PSO
    }

}


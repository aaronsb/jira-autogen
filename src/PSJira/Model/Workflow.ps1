#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a workflow.

.PARAMETER Created
The creation date of the workflow.
.PARAMETER Description
The description of the workflow.
.PARAMETER HasDraftWorkflow
Whether the workflow has a draft version.
.PARAMETER Id
No description available.
.PARAMETER IsDefault
Whether this is the default workflow.
.PARAMETER Operations
No description available.
.PARAMETER Projects
The projects the workflow is assigned to, through workflow schemes.
.PARAMETER Schemes
The workflow schemes the workflow is assigned to.
.PARAMETER Statuses
The statuses of the workflow.
.PARAMETER Transitions
The transitions of the workflow.
.PARAMETER Updated
The last edited date of the workflow.
.OUTPUTS

Workflow<PSCustomObject>
#>

function Initialize-Workflow {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasDraftWorkflow},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDefault},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Operations},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Projects},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Schemes},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Statuses},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Transitions},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Updated}
    )

    Process {
        'Creating PSCustomObject: PSJira => Workflow' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "created" = ${Created}
            "description" = ${Description}
            "hasDraftWorkflow" = ${HasDraftWorkflow}
            "id" = ${Id}
            "isDefault" = ${IsDefault}
            "operations" = ${Operations}
            "projects" = ${Projects}
            "schemes" = ${Schemes}
            "statuses" = ${Statuses}
            "transitions" = ${Transitions}
            "updated" = ${Updated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Workflow<PSCustomObject>

.DESCRIPTION

Convert from JSON to Workflow<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Workflow<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflow {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Workflow' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Workflow
        $AllProperties = ("created", "description", "hasDraftWorkflow", "id", "isDefault", "operations", "projects", "schemes", "statuses", "transitions", "updated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'description' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasDraftWorkflow"))) { #optional property not found
            $HasDraftWorkflow = $null
        } else {
            $HasDraftWorkflow = $JsonParameters.PSobject.Properties["hasDraftWorkflow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDefault"))) { #optional property not found
            $IsDefault = $null
        } else {
            $IsDefault = $JsonParameters.PSobject.Properties["isDefault"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operations"))) { #optional property not found
            $Operations = $null
        } else {
            $Operations = $JsonParameters.PSobject.Properties["operations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projects"))) { #optional property not found
            $Projects = $null
        } else {
            $Projects = $JsonParameters.PSobject.Properties["projects"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schemes"))) { #optional property not found
            $Schemes = $null
        } else {
            $Schemes = $JsonParameters.PSobject.Properties["schemes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statuses"))) { #optional property not found
            $Statuses = $null
        } else {
            $Statuses = $JsonParameters.PSobject.Properties["statuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transitions"))) { #optional property not found
            $Transitions = $null
        } else {
            $Transitions = $JsonParameters.PSobject.Properties["transitions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated"))) { #optional property not found
            $Updated = $null
        } else {
            $Updated = $JsonParameters.PSobject.Properties["updated"].value
        }

        $PSO = [PSCustomObject]@{
            "created" = ${Created}
            "description" = ${Description}
            "hasDraftWorkflow" = ${HasDraftWorkflow}
            "id" = ${Id}
            "isDefault" = ${IsDefault}
            "operations" = ${Operations}
            "projects" = ${Projects}
            "schemes" = ${Schemes}
            "statuses" = ${Statuses}
            "transitions" = ${Transitions}
            "updated" = ${Updated}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Paginated list of worklog details

.PARAMETER MaxResults
The maximum number of results that could be on the page.
.PARAMETER StartAt
The index of the first item returned on the page.
.PARAMETER Total
The number of results on the page.
.PARAMETER Worklogs
List of worklogs.
.OUTPUTS

PageOfWorklogs<PSCustomObject>
#>

function Initialize-PageOfWorklogs {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxResults},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StartAt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Total},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Worklogs}
    )

    Process {
        'Creating PSCustomObject: PSJira => PageOfWorklogs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "maxResults" = ${MaxResults}
            "startAt" = ${StartAt}
            "total" = ${Total}
            "worklogs" = ${Worklogs}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PageOfWorklogs<PSCustomObject>

.DESCRIPTION

Convert from JSON to PageOfWorklogs<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PageOfWorklogs<PSCustomObject>
#>
function ConvertFrom-JsonToPageOfWorklogs {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => PageOfWorklogs' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $PageOfWorklogsAdditionalProperties = @{}

        # check if Json contains properties not defined in PageOfWorklogs
        $AllProperties = ("maxResults", "startAt", "total", "worklogs")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $PageOfWorklogsAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxResults"))) { #optional property not found
            $MaxResults = $null
        } else {
            $MaxResults = $JsonParameters.PSobject.Properties["maxResults"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startAt"))) { #optional property not found
            $StartAt = $null
        } else {
            $StartAt = $JsonParameters.PSobject.Properties["startAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) { #optional property not found
            $Total = $null
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "worklogs"))) { #optional property not found
            $Worklogs = $null
        } else {
            $Worklogs = $JsonParameters.PSobject.Properties["worklogs"].value
        }

        $PSO = [PSCustomObject]@{
            "maxResults" = ${MaxResults}
            "startAt" = ${StartAt}
            "total" = ${Total}
            "worklogs" = ${Worklogs}
            "AdditionalProperties" = $PageOfWorklogsAdditionalProperties
        }

        return $PSO
    }

}


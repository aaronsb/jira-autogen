#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a project.

.PARAMETER Archived
Whether the project is archived.
.PARAMETER ArchivedBy
No description available.
.PARAMETER ArchivedDate
The date when the project was archived.
.PARAMETER AssigneeType
The default assignee when creating issues for this project.
.PARAMETER AvatarUrls
No description available.
.PARAMETER Components
List of the components contained in the project.
.PARAMETER Deleted
Whether the project is marked as deleted.
.PARAMETER DeletedBy
No description available.
.PARAMETER DeletedDate
The date when the project was marked as deleted.
.PARAMETER Description
A brief description of the project.
.PARAMETER Email
An email address associated with the project.
.PARAMETER Expand
Expand options that include additional project details in the response.
.PARAMETER Favourite
Whether the project is selected as a favorite.
.PARAMETER Id
The ID of the project.
.PARAMETER Insight
No description available.
.PARAMETER IsPrivate
Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues.
.PARAMETER IssueTypeHierarchy
No description available.
.PARAMETER IssueTypes
List of the issue types available in the project.
.PARAMETER Key
The key of the project.
.PARAMETER LandingPageInfo
No description available.
.PARAMETER Lead
No description available.
.PARAMETER Name
The name of the project.
.PARAMETER Permissions
No description available.
.PARAMETER ProjectCategory
No description available.
.PARAMETER ProjectTypeKey
The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
.PARAMETER Properties
Map of project properties
.PARAMETER RetentionTillDate
The date when the project is deleted permanently.
.PARAMETER Roles
The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
.PARAMETER Self
The URL of the project details.
.PARAMETER Simplified
Whether the project is simplified.
.PARAMETER Style
The type of the project.
.PARAMETER Url
A link to information about this project, such as project documentation.
.PARAMETER Uuid
Unique ID for next-gen projects.
.PARAMETER Versions
The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
.OUTPUTS

Project<PSCustomObject>
#>

function Initialize-Project {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Archived},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ArchivedBy},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ArchivedDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PROJECT_LEAD", "UNASSIGNED")]
        [String]
        ${AssigneeType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AvatarUrls},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Components},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Deleted},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DeletedBy},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DeletedDate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expand},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Favourite},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Insight},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPrivate},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IssueTypeHierarchy},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${IssueTypes},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LandingPageInfo},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Lead},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Permissions},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProjectCategory},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("software", "service_desk", "business")]
        [String]
        ${ProjectTypeKey},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Properties},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RetentionTillDate},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Roles},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Simplified},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("classic", "next-gen")]
        [String]
        ${Style},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [Version[]]
        ${Versions}
    )

    Process {
        'Creating PSCustomObject: PSJira => Project' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "archived" = ${Archived}
            "archivedBy" = ${ArchivedBy}
            "archivedDate" = ${ArchivedDate}
            "assigneeType" = ${AssigneeType}
            "avatarUrls" = ${AvatarUrls}
            "components" = ${Components}
            "deleted" = ${Deleted}
            "deletedBy" = ${DeletedBy}
            "deletedDate" = ${DeletedDate}
            "description" = ${Description}
            "email" = ${Email}
            "expand" = ${Expand}
            "favourite" = ${Favourite}
            "id" = ${Id}
            "insight" = ${Insight}
            "isPrivate" = ${IsPrivate}
            "issueTypeHierarchy" = ${IssueTypeHierarchy}
            "issueTypes" = ${IssueTypes}
            "key" = ${Key}
            "landingPageInfo" = ${LandingPageInfo}
            "lead" = ${Lead}
            "name" = ${Name}
            "permissions" = ${Permissions}
            "projectCategory" = ${ProjectCategory}
            "projectTypeKey" = ${ProjectTypeKey}
            "properties" = ${Properties}
            "retentionTillDate" = ${RetentionTillDate}
            "roles" = ${Roles}
            "self" = ${Self}
            "simplified" = ${Simplified}
            "style" = ${Style}
            "url" = ${Url}
            "uuid" = ${Uuid}
            "versions" = ${Versions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Project<PSCustomObject>

.DESCRIPTION

Convert from JSON to Project<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Project<PSCustomObject>
#>
function ConvertFrom-JsonToProject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Project' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Project
        $AllProperties = ("archived", "archivedBy", "archivedDate", "assigneeType", "avatarUrls", "components", "deleted", "deletedBy", "deletedDate", "description", "email", "expand", "favourite", "id", "insight", "isPrivate", "issueTypeHierarchy", "issueTypes", "key", "landingPageInfo", "lead", "name", "permissions", "projectCategory", "projectTypeKey", "properties", "retentionTillDate", "roles", "self", "simplified", "style", "url", "uuid", "versions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "archived"))) { #optional property not found
            $Archived = $null
        } else {
            $Archived = $JsonParameters.PSobject.Properties["archived"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "archivedBy"))) { #optional property not found
            $ArchivedBy = $null
        } else {
            $ArchivedBy = $JsonParameters.PSobject.Properties["archivedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "archivedDate"))) { #optional property not found
            $ArchivedDate = $null
        } else {
            $ArchivedDate = $JsonParameters.PSobject.Properties["archivedDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigneeType"))) { #optional property not found
            $AssigneeType = $null
        } else {
            $AssigneeType = $JsonParameters.PSobject.Properties["assigneeType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avatarUrls"))) { #optional property not found
            $AvatarUrls = $null
        } else {
            $AvatarUrls = $JsonParameters.PSobject.Properties["avatarUrls"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "components"))) { #optional property not found
            $Components = $null
        } else {
            $Components = $JsonParameters.PSobject.Properties["components"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deleted"))) { #optional property not found
            $Deleted = $null
        } else {
            $Deleted = $JsonParameters.PSobject.Properties["deleted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deletedBy"))) { #optional property not found
            $DeletedBy = $null
        } else {
            $DeletedBy = $JsonParameters.PSobject.Properties["deletedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deletedDate"))) { #optional property not found
            $DeletedDate = $null
        } else {
            $DeletedDate = $JsonParameters.PSobject.Properties["deletedDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expand"))) { #optional property not found
            $Expand = $null
        } else {
            $Expand = $JsonParameters.PSobject.Properties["expand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "favourite"))) { #optional property not found
            $Favourite = $null
        } else {
            $Favourite = $JsonParameters.PSobject.Properties["favourite"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "insight"))) { #optional property not found
            $Insight = $null
        } else {
            $Insight = $JsonParameters.PSobject.Properties["insight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPrivate"))) { #optional property not found
            $IsPrivate = $null
        } else {
            $IsPrivate = $JsonParameters.PSobject.Properties["isPrivate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeHierarchy"))) { #optional property not found
            $IssueTypeHierarchy = $null
        } else {
            $IssueTypeHierarchy = $JsonParameters.PSobject.Properties["issueTypeHierarchy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypes"))) { #optional property not found
            $IssueTypes = $null
        } else {
            $IssueTypes = $JsonParameters.PSobject.Properties["issueTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "landingPageInfo"))) { #optional property not found
            $LandingPageInfo = $null
        } else {
            $LandingPageInfo = $JsonParameters.PSobject.Properties["landingPageInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lead"))) { #optional property not found
            $Lead = $null
        } else {
            $Lead = $JsonParameters.PSobject.Properties["lead"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permissions"))) { #optional property not found
            $Permissions = $null
        } else {
            $Permissions = $JsonParameters.PSobject.Properties["permissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectCategory"))) { #optional property not found
            $ProjectCategory = $null
        } else {
            $ProjectCategory = $JsonParameters.PSobject.Properties["projectCategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectTypeKey"))) { #optional property not found
            $ProjectTypeKey = $null
        } else {
            $ProjectTypeKey = $JsonParameters.PSobject.Properties["projectTypeKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retentionTillDate"))) { #optional property not found
            $RetentionTillDate = $null
        } else {
            $RetentionTillDate = $JsonParameters.PSobject.Properties["retentionTillDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roles"))) { #optional property not found
            $Roles = $null
        } else {
            $Roles = $JsonParameters.PSobject.Properties["roles"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "simplified"))) { #optional property not found
            $Simplified = $null
        } else {
            $Simplified = $JsonParameters.PSobject.Properties["simplified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "style"))) { #optional property not found
            $Style = $null
        } else {
            $Style = $JsonParameters.PSobject.Properties["style"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "versions"))) { #optional property not found
            $Versions = $null
        } else {
            $Versions = $JsonParameters.PSobject.Properties["versions"].value
        }

        $PSO = [PSCustomObject]@{
            "archived" = ${Archived}
            "archivedBy" = ${ArchivedBy}
            "archivedDate" = ${ArchivedDate}
            "assigneeType" = ${AssigneeType}
            "avatarUrls" = ${AvatarUrls}
            "components" = ${Components}
            "deleted" = ${Deleted}
            "deletedBy" = ${DeletedBy}
            "deletedDate" = ${DeletedDate}
            "description" = ${Description}
            "email" = ${Email}
            "expand" = ${Expand}
            "favourite" = ${Favourite}
            "id" = ${Id}
            "insight" = ${Insight}
            "isPrivate" = ${IsPrivate}
            "issueTypeHierarchy" = ${IssueTypeHierarchy}
            "issueTypes" = ${IssueTypes}
            "key" = ${Key}
            "landingPageInfo" = ${LandingPageInfo}
            "lead" = ${Lead}
            "name" = ${Name}
            "permissions" = ${Permissions}
            "projectCategory" = ${ProjectCategory}
            "projectTypeKey" = ${ProjectTypeKey}
            "properties" = ${Properties}
            "retentionTillDate" = ${RetentionTillDate}
            "roles" = ${Roles}
            "self" = ${Self}
            "simplified" = ${Simplified}
            "style" = ${Style}
            "url" = ${Url}
            "uuid" = ${Uuid}
            "versions" = ${Versions}
        }

        return $PSO
    }

}


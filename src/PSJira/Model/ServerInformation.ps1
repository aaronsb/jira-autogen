#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about the Jira instance.

.PARAMETER BaseUrl
The base URL of the Jira instance.
.PARAMETER BuildDate
The timestamp when the Jira version was built.
.PARAMETER BuildNumber
The build number of the Jira version.
.PARAMETER DeploymentType
The type of server deployment. This is always returned as *Cloud*.
.PARAMETER DisplayUrl
The display URL of the Jira instance.
.PARAMETER DisplayUrlServicedeskHelpCenter
The display URL of the Servicedesk Help Center.
.PARAMETER HealthChecks
Jira instance health check results. Deprecated and no longer returned.
.PARAMETER ScmInfo
The unique identifier of the Jira version.
.PARAMETER ServerTime
The time in Jira when this request was responded to.
.PARAMETER ServerTimeZone
No description available.
.PARAMETER ServerTitle
The name of the Jira instance.
.PARAMETER Version
The version of Jira.
.PARAMETER VersionNumbers
The major, minor, and revision version numbers of the Jira version.
.OUTPUTS

ServerInformation<PSCustomObject>
#>

function Initialize-ServerInformation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BaseUrl},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${BuildDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BuildNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeploymentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayUrl},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayUrlServicedeskHelpCenter},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${HealthChecks},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScmInfo},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ServerTime},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ServerTimeZone},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ServerTitle},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${VersionNumbers}
    )

    Process {
        'Creating PSCustomObject: PSJira => ServerInformation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "baseUrl" = ${BaseUrl}
            "buildDate" = ${BuildDate}
            "buildNumber" = ${BuildNumber}
            "deploymentType" = ${DeploymentType}
            "displayUrl" = ${DisplayUrl}
            "displayUrlServicedeskHelpCenter" = ${DisplayUrlServicedeskHelpCenter}
            "healthChecks" = ${HealthChecks}
            "scmInfo" = ${ScmInfo}
            "serverTime" = ${ServerTime}
            "serverTimeZone" = ${ServerTimeZone}
            "serverTitle" = ${ServerTitle}
            "version" = ${Version}
            "versionNumbers" = ${VersionNumbers}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServerInformation<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServerInformation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServerInformation<PSCustomObject>
#>
function ConvertFrom-JsonToServerInformation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ServerInformation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ServerInformation
        $AllProperties = ("baseUrl", "buildDate", "buildNumber", "deploymentType", "displayUrl", "displayUrlServicedeskHelpCenter", "healthChecks", "scmInfo", "serverTime", "serverTimeZone", "serverTitle", "version", "versionNumbers")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "baseUrl"))) { #optional property not found
            $BaseUrl = $null
        } else {
            $BaseUrl = $JsonParameters.PSobject.Properties["baseUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buildDate"))) { #optional property not found
            $BuildDate = $null
        } else {
            $BuildDate = $JsonParameters.PSobject.Properties["buildDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buildNumber"))) { #optional property not found
            $BuildNumber = $null
        } else {
            $BuildNumber = $JsonParameters.PSobject.Properties["buildNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deploymentType"))) { #optional property not found
            $DeploymentType = $null
        } else {
            $DeploymentType = $JsonParameters.PSobject.Properties["deploymentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayUrl"))) { #optional property not found
            $DisplayUrl = $null
        } else {
            $DisplayUrl = $JsonParameters.PSobject.Properties["displayUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayUrlServicedeskHelpCenter"))) { #optional property not found
            $DisplayUrlServicedeskHelpCenter = $null
        } else {
            $DisplayUrlServicedeskHelpCenter = $JsonParameters.PSobject.Properties["displayUrlServicedeskHelpCenter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "healthChecks"))) { #optional property not found
            $HealthChecks = $null
        } else {
            $HealthChecks = $JsonParameters.PSobject.Properties["healthChecks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scmInfo"))) { #optional property not found
            $ScmInfo = $null
        } else {
            $ScmInfo = $JsonParameters.PSobject.Properties["scmInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverTime"))) { #optional property not found
            $ServerTime = $null
        } else {
            $ServerTime = $JsonParameters.PSobject.Properties["serverTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverTimeZone"))) { #optional property not found
            $ServerTimeZone = $null
        } else {
            $ServerTimeZone = $JsonParameters.PSobject.Properties["serverTimeZone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serverTitle"))) { #optional property not found
            $ServerTitle = $null
        } else {
            $ServerTitle = $JsonParameters.PSobject.Properties["serverTitle"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "versionNumbers"))) { #optional property not found
            $VersionNumbers = $null
        } else {
            $VersionNumbers = $JsonParameters.PSobject.Properties["versionNumbers"].value
        }

        $PSO = [PSCustomObject]@{
            "baseUrl" = ${BaseUrl}
            "buildDate" = ${BuildDate}
            "buildNumber" = ${BuildNumber}
            "deploymentType" = ${DeploymentType}
            "displayUrl" = ${DisplayUrl}
            "displayUrlServicedeskHelpCenter" = ${DisplayUrlServicedeskHelpCenter}
            "healthChecks" = ${HealthChecks}
            "scmInfo" = ${ScmInfo}
            "serverTime" = ${ServerTime}
            "serverTimeZone" = ${ServerTimeZone}
            "serverTitle" = ${ServerTitle}
            "version" = ${Version}
            "versionNumbers" = ${VersionNumbers}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about the analysed Jira expression.

.PARAMETER Complexity
No description available.
.PARAMETER Errors
A list of validation errors. Not included if the expression is valid.
.PARAMETER Expression
The analysed expression.
.PARAMETER Type
EXPERIMENTAL. The inferred type of the expression.
.PARAMETER Valid
Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
.OUTPUTS

JiraExpressionAnalysis<PSCustomObject>
#>

function Initialize-JiraExpressionAnalysis {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Complexity},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Errors},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expression},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Valid}
    )

    Process {
        'Creating PSCustomObject: PSJira => JiraExpressionAnalysis' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Expression) {
            throw "invalid value for 'Expression', 'Expression' cannot be null."
        }

        if ($null -eq $Valid) {
            throw "invalid value for 'Valid', 'Valid' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "complexity" = ${Complexity}
            "errors" = ${Errors}
            "expression" = ${Expression}
            "type" = ${Type}
            "valid" = ${Valid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JiraExpressionAnalysis<PSCustomObject>

.DESCRIPTION

Convert from JSON to JiraExpressionAnalysis<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JiraExpressionAnalysis<PSCustomObject>
#>
function ConvertFrom-JsonToJiraExpressionAnalysis {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JiraExpressionAnalysis' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JiraExpressionAnalysis
        $AllProperties = ("complexity", "errors", "expression", "type", "valid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'expression' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expression"))) {
            throw "Error! JSON cannot be serialized due to the required property 'expression' missing."
        } else {
            $Expression = $JsonParameters.PSobject.Properties["expression"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "valid"))) {
            throw "Error! JSON cannot be serialized due to the required property 'valid' missing."
        } else {
            $Valid = $JsonParameters.PSobject.Properties["valid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "complexity"))) { #optional property not found
            $Complexity = $null
        } else {
            $Complexity = $JsonParameters.PSobject.Properties["complexity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) { #optional property not found
            $Errors = $null
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "complexity" = ${Complexity}
            "errors" = ${Errors}
            "expression" = ${Expression}
            "type" = ${Type}
            "valid" = ${Valid}
        }

        return $PSO
    }

}


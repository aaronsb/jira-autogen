#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the status being updated.

.PARAMETER Description
The description of the status.
.PARAMETER Id
The ID of the status.
.PARAMETER Name
The name of the status.
.PARAMETER StatusCategory
The category of the status.
.PARAMETER StatusReference
The reference of the status.
.OUTPUTS

WorkflowStatusUpdate<PSCustomObject>
#>

function Initialize-WorkflowStatusUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TODO", "IN_PROGRESS", "DONE")]
        [String]
        ${StatusCategory},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusReference}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowStatusUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $StatusCategory) {
            throw "invalid value for 'StatusCategory', 'StatusCategory' cannot be null."
        }

        if ($null -eq $StatusReference) {
            throw "invalid value for 'StatusReference', 'StatusReference' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "statusCategory" = ${StatusCategory}
            "statusReference" = ${StatusReference}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowStatusUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowStatusUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowStatusUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowStatusUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowStatusUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $WorkflowStatusUpdateAdditionalProperties = @{}

        # check if Json contains properties not defined in WorkflowStatusUpdate
        $AllProperties = ("description", "id", "name", "statusCategory", "statusReference")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $WorkflowStatusUpdateAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusCategory"))) {
            throw "Error! JSON cannot be serialized due to the required property 'statusCategory' missing."
        } else {
            $StatusCategory = $JsonParameters.PSobject.Properties["statusCategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusReference"))) {
            throw "Error! JSON cannot be serialized due to the required property 'statusReference' missing."
        } else {
            $StatusReference = $JsonParameters.PSobject.Properties["statusReference"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "statusCategory" = ${StatusCategory}
            "statusReference" = ${StatusReference}
            "AdditionalProperties" = $WorkflowStatusUpdateAdditionalProperties
        }

        return $PSO
    }

}


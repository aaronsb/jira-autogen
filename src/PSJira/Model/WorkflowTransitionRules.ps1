#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A workflow with transition rules.

.PARAMETER Conditions
The list of conditions within the workflow.
.PARAMETER PostFunctions
The list of post functions within the workflow.
.PARAMETER Validators
The list of validators within the workflow.
.PARAMETER WorkflowId
No description available.
.OUTPUTS

WorkflowTransitionRules<PSCustomObject>
#>

function Initialize-WorkflowTransitionRules {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Conditions},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PostFunctions},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Validators},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WorkflowId}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowTransitionRules' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $WorkflowId) {
            throw "invalid value for 'WorkflowId', 'WorkflowId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "conditions" = ${Conditions}
            "postFunctions" = ${PostFunctions}
            "validators" = ${Validators}
            "workflowId" = ${WorkflowId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowTransitionRules<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowTransitionRules<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowTransitionRules<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowTransitionRules {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowTransitionRules' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowTransitionRules
        $AllProperties = ("conditions", "postFunctions", "validators", "workflowId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'workflowId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workflowId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'workflowId' missing."
        } else {
            $WorkflowId = $JsonParameters.PSobject.Properties["workflowId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conditions"))) { #optional property not found
            $Conditions = $null
        } else {
            $Conditions = $JsonParameters.PSobject.Properties["conditions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postFunctions"))) { #optional property not found
            $PostFunctions = $null
        } else {
            $PostFunctions = $JsonParameters.PSobject.Properties["postFunctions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validators"))) { #optional property not found
            $Validators = $null
        } else {
            $Validators = $JsonParameters.PSobject.Properties["validators"].value
        }

        $PSO = [PSCustomObject]@{
            "conditions" = ${Conditions}
            "postFunctions" = ${PostFunctions}
            "validators" = ${Validators}
            "workflowId" = ${WorkflowId}
        }

        return $PSO
    }

}


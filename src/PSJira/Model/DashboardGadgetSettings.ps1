#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the settings for a dashboard gadget.

.PARAMETER Color
The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
.PARAMETER IgnoreUriAndModuleKeyValidation
Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.
.PARAMETER ModuleKey
The module key of the gadget type. Can't be provided with `uri`.
.PARAMETER Position
The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.
.PARAMETER Title
The title of the gadget.
.PARAMETER Uri
The URI of the gadget type. Can't be provided with `moduleKey`.
.OUTPUTS

DashboardGadgetSettings<PSCustomObject>
#>

function Initialize-DashboardGadgetSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Color},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IgnoreUriAndModuleKeyValidation},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModuleKey},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Position},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uri}
    )

    Process {
        'Creating PSCustomObject: PSJira => DashboardGadgetSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "color" = ${Color}
            "ignoreUriAndModuleKeyValidation" = ${IgnoreUriAndModuleKeyValidation}
            "moduleKey" = ${ModuleKey}
            "position" = ${Position}
            "title" = ${Title}
            "uri" = ${Uri}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DashboardGadgetSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to DashboardGadgetSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DashboardGadgetSettings<PSCustomObject>
#>
function ConvertFrom-JsonToDashboardGadgetSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => DashboardGadgetSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DashboardGadgetSettings
        $AllProperties = ("color", "ignoreUriAndModuleKeyValidation", "moduleKey", "position", "title", "uri")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "color"))) { #optional property not found
            $Color = $null
        } else {
            $Color = $JsonParameters.PSobject.Properties["color"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ignoreUriAndModuleKeyValidation"))) { #optional property not found
            $IgnoreUriAndModuleKeyValidation = $null
        } else {
            $IgnoreUriAndModuleKeyValidation = $JsonParameters.PSobject.Properties["ignoreUriAndModuleKeyValidation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleKey"))) { #optional property not found
            $ModuleKey = $null
        } else {
            $ModuleKey = $JsonParameters.PSobject.Properties["moduleKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uri"))) { #optional property not found
            $Uri = $null
        } else {
            $Uri = $JsonParameters.PSobject.Properties["uri"].value
        }

        $PSO = [PSCustomObject]@{
            "color" = ${Color}
            "ignoreUriAndModuleKeyValidation" = ${IgnoreUriAndModuleKeyValidation}
            "moduleKey" = ${ModuleKey}
            "position" = ${Position}
            "title" = ${Title}
            "uri" = ${Uri}
        }

        return $PSO
    }

}


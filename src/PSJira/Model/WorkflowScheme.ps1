#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about a workflow scheme.

.PARAMETER DefaultWorkflow
The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
.PARAMETER Description
The description of the workflow scheme.
.PARAMETER Draft
Whether the workflow scheme is a draft or not.
.PARAMETER Id
The ID of the workflow scheme.
.PARAMETER IssueTypeMappings
The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
.PARAMETER IssueTypes
The issue types available in Jira.
.PARAMETER LastModified
The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
.PARAMETER LastModifiedUser
No description available.
.PARAMETER Name
The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
.PARAMETER OriginalDefaultWorkflow
For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
.PARAMETER OriginalIssueTypeMappings
For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
.PARAMETER Self
No description available.
.PARAMETER UpdateDraftIfNeeded
Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to `false`.
.OUTPUTS

WorkflowScheme<PSCustomObject>
#>

function Initialize-WorkflowScheme {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultWorkflow},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Draft},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${IssueTypeMappings},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${IssueTypes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastModified},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastModifiedUser},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OriginalDefaultWorkflow},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${OriginalIssueTypeMappings},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UpdateDraftIfNeeded}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowScheme' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "defaultWorkflow" = ${DefaultWorkflow}
            "description" = ${Description}
            "draft" = ${Draft}
            "id" = ${Id}
            "issueTypeMappings" = ${IssueTypeMappings}
            "issueTypes" = ${IssueTypes}
            "lastModified" = ${LastModified}
            "lastModifiedUser" = ${LastModifiedUser}
            "name" = ${Name}
            "originalDefaultWorkflow" = ${OriginalDefaultWorkflow}
            "originalIssueTypeMappings" = ${OriginalIssueTypeMappings}
            "self" = ${Self}
            "updateDraftIfNeeded" = ${UpdateDraftIfNeeded}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowScheme<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowScheme<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowScheme<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowScheme {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowScheme' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowScheme
        $AllProperties = ("defaultWorkflow", "description", "draft", "id", "issueTypeMappings", "issueTypes", "lastModified", "lastModifiedUser", "name", "originalDefaultWorkflow", "originalIssueTypeMappings", "self", "updateDraftIfNeeded")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultWorkflow"))) { #optional property not found
            $DefaultWorkflow = $null
        } else {
            $DefaultWorkflow = $JsonParameters.PSobject.Properties["defaultWorkflow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "draft"))) { #optional property not found
            $Draft = $null
        } else {
            $Draft = $JsonParameters.PSobject.Properties["draft"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeMappings"))) { #optional property not found
            $IssueTypeMappings = $null
        } else {
            $IssueTypeMappings = $JsonParameters.PSobject.Properties["issueTypeMappings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypes"))) { #optional property not found
            $IssueTypes = $null
        } else {
            $IssueTypes = $JsonParameters.PSobject.Properties["issueTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastModified"))) { #optional property not found
            $LastModified = $null
        } else {
            $LastModified = $JsonParameters.PSobject.Properties["lastModified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastModifiedUser"))) { #optional property not found
            $LastModifiedUser = $null
        } else {
            $LastModifiedUser = $JsonParameters.PSobject.Properties["lastModifiedUser"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "originalDefaultWorkflow"))) { #optional property not found
            $OriginalDefaultWorkflow = $null
        } else {
            $OriginalDefaultWorkflow = $JsonParameters.PSobject.Properties["originalDefaultWorkflow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "originalIssueTypeMappings"))) { #optional property not found
            $OriginalIssueTypeMappings = $null
        } else {
            $OriginalIssueTypeMappings = $JsonParameters.PSobject.Properties["originalIssueTypeMappings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateDraftIfNeeded"))) { #optional property not found
            $UpdateDraftIfNeeded = $null
        } else {
            $UpdateDraftIfNeeded = $JsonParameters.PSobject.Properties["updateDraftIfNeeded"].value
        }

        $PSO = [PSCustomObject]@{
            "defaultWorkflow" = ${DefaultWorkflow}
            "description" = ${Description}
            "draft" = ${Draft}
            "id" = ${Id}
            "issueTypeMappings" = ${IssueTypeMappings}
            "issueTypes" = ${IssueTypes}
            "lastModified" = ${LastModified}
            "lastModifiedUser" = ${LastModifiedUser}
            "name" = ${Name}
            "originalDefaultWorkflow" = ${OriginalDefaultWorkflow}
            "originalIssueTypeMappings" = ${OriginalIssueTypeMappings}
            "self" = ${Self}
            "updateDraftIfNeeded" = ${UpdateDraftIfNeeded}
        }

        return $PSO
    }

}


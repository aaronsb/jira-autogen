#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The trigger configuration associated with a workflow.

.PARAMETER Id
The ID of the trigger.
.PARAMETER Parameters
The parameters of the trigger.
.PARAMETER RuleKey
The rule key of the trigger.
.OUTPUTS

WorkflowTrigger<PSCustomObject>
#>

function Initialize-WorkflowTrigger {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Parameters},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RuleKey}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowTrigger' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Parameters) {
            throw "invalid value for 'Parameters', 'Parameters' cannot be null."
        }

        if ($null -eq $RuleKey) {
            throw "invalid value for 'RuleKey', 'RuleKey' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "parameters" = ${Parameters}
            "ruleKey" = ${RuleKey}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowTrigger<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowTrigger<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowTrigger<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowTrigger {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowTrigger' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowTrigger
        $AllProperties = ("id", "parameters", "ruleKey")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'parameters' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameters"))) {
            throw "Error! JSON cannot be serialized due to the required property 'parameters' missing."
        } else {
            $Parameters = $JsonParameters.PSobject.Properties["parameters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleKey"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ruleKey' missing."
        } else {
            $RuleKey = $JsonParameters.PSobject.Properties["ruleKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "parameters" = ${Parameters}
            "ruleKey" = ${RuleKey}
        }

        return $PSO
    }

}


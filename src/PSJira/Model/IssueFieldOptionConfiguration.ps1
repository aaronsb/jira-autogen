#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the projects the option is available in.

.PARAMETER Attributes
DEPRECATED
.PARAMETER Scope
Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects.
.OUTPUTS

IssueFieldOptionConfiguration<PSCustomObject>
#>

function Initialize-IssueFieldOptionConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("notSelectable", "defaultValue")]
        [String[]]
        ${Attributes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scope}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueFieldOptionConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "attributes" = ${Attributes}
            "scope" = ${Scope}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueFieldOptionConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueFieldOptionConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueFieldOptionConfiguration<PSCustomObject>
#>
function ConvertFrom-JsonToIssueFieldOptionConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueFieldOptionConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueFieldOptionConfiguration
        $AllProperties = ("attributes", "scope")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attributes"))) { #optional property not found
            $Attributes = $null
        } else {
            $Attributes = $JsonParameters.PSobject.Properties["attributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        $PSO = [PSCustomObject]@{
            "attributes" = ${Attributes}
            "scope" = ${Scope}
        }

        return $PSO
    }

}


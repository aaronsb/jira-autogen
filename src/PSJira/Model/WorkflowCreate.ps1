#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The details of the workflows to create.

.PARAMETER Description
The description of the workflow to create.
.PARAMETER Name
The name of the workflow to create.
.PARAMETER StartPointLayout
No description available.
.PARAMETER Statuses
The statuses associated with this workflow.
.PARAMETER Transitions
The transitions of this workflow.
.OUTPUTS

WorkflowCreate<PSCustomObject>
#>

function Initialize-WorkflowCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StartPointLayout},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Statuses},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Transitions}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Statuses) {
            throw "invalid value for 'Statuses', 'Statuses' cannot be null."
        }

        if ($null -eq $Transitions) {
            throw "invalid value for 'Transitions', 'Transitions' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "name" = ${Name}
            "startPointLayout" = ${StartPointLayout}
            "statuses" = ${Statuses}
            "transitions" = ${Transitions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowCreate<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowCreate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowCreate<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowCreate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowCreate
        $AllProperties = ("description", "name", "startPointLayout", "statuses", "transitions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statuses"))) {
            throw "Error! JSON cannot be serialized due to the required property 'statuses' missing."
        } else {
            $Statuses = $JsonParameters.PSobject.Properties["statuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transitions"))) {
            throw "Error! JSON cannot be serialized due to the required property 'transitions' missing."
        } else {
            $Transitions = $JsonParameters.PSobject.Properties["transitions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startPointLayout"))) { #optional property not found
            $StartPointLayout = $null
        } else {
            $StartPointLayout = $JsonParameters.PSobject.Properties["startPointLayout"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "name" = ${Name}
            "startPointLayout" = ${StartPointLayout}
            "statuses" = ${Statuses}
            "transitions" = ${Transitions}
        }

        return $PSO
    }

}


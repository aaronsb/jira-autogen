#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a permission and its availability to a user.

.PARAMETER DeprecatedKey
Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`
.PARAMETER Description
The description of the permission.
.PARAMETER HavePermission
Whether the permission is available to the user in the queried context.
.PARAMETER Id
The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
.PARAMETER Key
The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
.PARAMETER Name
The name of the permission.
.PARAMETER Type
The type of the permission.
.OUTPUTS

UserPermission<PSCustomObject>
#>

function Initialize-UserPermission {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DeprecatedKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HavePermission},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("GLOBAL", "PROJECT")]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSJira => UserPermission' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "deprecatedKey" = ${DeprecatedKey}
            "description" = ${Description}
            "havePermission" = ${HavePermission}
            "id" = ${Id}
            "key" = ${Key}
            "name" = ${Name}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserPermission<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserPermission<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserPermission<PSCustomObject>
#>
function ConvertFrom-JsonToUserPermission {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => UserPermission' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $UserPermissionAdditionalProperties = @{}

        # check if Json contains properties not defined in UserPermission
        $AllProperties = ("deprecatedKey", "description", "havePermission", "id", "key", "name", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $UserPermissionAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deprecatedKey"))) { #optional property not found
            $DeprecatedKey = $null
        } else {
            $DeprecatedKey = $JsonParameters.PSobject.Properties["deprecatedKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "havePermission"))) { #optional property not found
            $HavePermission = $null
        } else {
            $HavePermission = $JsonParameters.PSobject.Properties["havePermission"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "deprecatedKey" = ${DeprecatedKey}
            "description" = ${Description}
            "havePermission" = ${HavePermission}
            "id" = ${Id}
            "key" = ${Key}
            "name" = ${Name}
            "type" = ${Type}
            "AdditionalProperties" = $UserPermissionAdditionalProperties
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The details of a created custom field context.

.PARAMETER Description
The description of the context.
.PARAMETER Id
The ID of the context.
.PARAMETER IssueTypeIds
The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.
.PARAMETER Name
The name of the context.
.PARAMETER ProjectIds
The list of project IDs associated with the context. If the list is empty, the context is global.
.OUTPUTS

CreateCustomFieldContext<PSCustomObject>
#>

function Initialize-CreateCustomFieldContext {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IssueTypeIds},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ProjectIds}
    )

    Process {
        'Creating PSCustomObject: PSJira => CreateCustomFieldContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "issueTypeIds" = ${IssueTypeIds}
            "name" = ${Name}
            "projectIds" = ${ProjectIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateCustomFieldContext<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateCustomFieldContext<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateCustomFieldContext<PSCustomObject>
#>
function ConvertFrom-JsonToCreateCustomFieldContext {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => CreateCustomFieldContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateCustomFieldContext
        $AllProperties = ("description", "id", "issueTypeIds", "name", "projectIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeIds"))) { #optional property not found
            $IssueTypeIds = $null
        } else {
            $IssueTypeIds = $JsonParameters.PSobject.Properties["issueTypeIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectIds"))) { #optional property not found
            $ProjectIds = $null
        } else {
            $ProjectIds = $JsonParameters.PSobject.Properties["projectIds"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "issueTypeIds" = ${IssueTypeIds}
            "name" = ${Name}
            "projectIds" = ${ProjectIds}
        }

        return $PSO
    }

}


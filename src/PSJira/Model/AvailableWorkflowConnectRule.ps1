#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The Connect provided ecosystem rules available.

.PARAMETER AddonKey
The add-on providing the rule.
.PARAMETER CreateUrl
The URL creation path segment defined in the Connect module.
.PARAMETER Description
The rule description.
.PARAMETER EditUrl
The URL edit path segment defined in the Connect module.
.PARAMETER ModuleKey
The module providing the rule.
.PARAMETER Name
The rule name.
.PARAMETER RuleKey
The rule key.
.PARAMETER RuleType
The rule type.
.PARAMETER ViewUrl
The URL view path segment defined in the Connect module.
.OUTPUTS

AvailableWorkflowConnectRule<PSCustomObject>
#>

function Initialize-AvailableWorkflowConnectRule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddonKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreateUrl},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EditUrl},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ModuleKey},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RuleKey},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Condition", "Validator", "Function", "Screen")]
        [String]
        ${RuleType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ViewUrl}
    )

    Process {
        'Creating PSCustomObject: PSJira => AvailableWorkflowConnectRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "addonKey" = ${AddonKey}
            "createUrl" = ${CreateUrl}
            "description" = ${Description}
            "editUrl" = ${EditUrl}
            "moduleKey" = ${ModuleKey}
            "name" = ${Name}
            "ruleKey" = ${RuleKey}
            "ruleType" = ${RuleType}
            "viewUrl" = ${ViewUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AvailableWorkflowConnectRule<PSCustomObject>

.DESCRIPTION

Convert from JSON to AvailableWorkflowConnectRule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AvailableWorkflowConnectRule<PSCustomObject>
#>
function ConvertFrom-JsonToAvailableWorkflowConnectRule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => AvailableWorkflowConnectRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AvailableWorkflowConnectRule
        $AllProperties = ("addonKey", "createUrl", "description", "editUrl", "moduleKey", "name", "ruleKey", "ruleType", "viewUrl")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "addonKey"))) { #optional property not found
            $AddonKey = $null
        } else {
            $AddonKey = $JsonParameters.PSobject.Properties["addonKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createUrl"))) { #optional property not found
            $CreateUrl = $null
        } else {
            $CreateUrl = $JsonParameters.PSobject.Properties["createUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "editUrl"))) { #optional property not found
            $EditUrl = $null
        } else {
            $EditUrl = $JsonParameters.PSobject.Properties["editUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "moduleKey"))) { #optional property not found
            $ModuleKey = $null
        } else {
            $ModuleKey = $JsonParameters.PSobject.Properties["moduleKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleKey"))) { #optional property not found
            $RuleKey = $null
        } else {
            $RuleKey = $JsonParameters.PSobject.Properties["ruleKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleType"))) { #optional property not found
            $RuleType = $null
        } else {
            $RuleType = $JsonParameters.PSobject.Properties["ruleType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "viewUrl"))) { #optional property not found
            $ViewUrl = $null
        } else {
            $ViewUrl = $JsonParameters.PSobject.Properties["viewUrl"].value
        }

        $PSO = [PSCustomObject]@{
            "addonKey" = ${AddonKey}
            "createUrl" = ${CreateUrl}
            "description" = ${Description}
            "editUrl" = ${EditUrl}
            "moduleKey" = ${ModuleKey}
            "name" = ${Name}
            "ruleKey" = ${RuleKey}
            "ruleType" = ${RuleType}
            "viewUrl" = ${ViewUrl}
        }

        return $PSO
    }

}


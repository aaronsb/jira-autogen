#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of any errors encountered while updating workflow transition rules for a workflow.

.PARAMETER RuleUpdateErrors
A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.
.PARAMETER UpdateErrors
The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.
.PARAMETER WorkflowId
No description available.
.OUTPUTS

WorkflowTransitionRulesUpdateErrorDetails<PSCustomObject>
#>

function Initialize-WorkflowTransitionRulesUpdateErrorDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${RuleUpdateErrors},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${UpdateErrors},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WorkflowId}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowTransitionRulesUpdateErrorDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $RuleUpdateErrors) {
            throw "invalid value for 'RuleUpdateErrors', 'RuleUpdateErrors' cannot be null."
        }

        if ($null -eq $UpdateErrors) {
            throw "invalid value for 'UpdateErrors', 'UpdateErrors' cannot be null."
        }

        if ($null -eq $WorkflowId) {
            throw "invalid value for 'WorkflowId', 'WorkflowId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "ruleUpdateErrors" = ${RuleUpdateErrors}
            "updateErrors" = ${UpdateErrors}
            "workflowId" = ${WorkflowId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowTransitionRulesUpdateErrorDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowTransitionRulesUpdateErrorDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowTransitionRulesUpdateErrorDetails<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowTransitionRulesUpdateErrorDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowTransitionRulesUpdateErrorDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowTransitionRulesUpdateErrorDetails
        $AllProperties = ("ruleUpdateErrors", "updateErrors", "workflowId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'ruleUpdateErrors' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleUpdateErrors"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ruleUpdateErrors' missing."
        } else {
            $RuleUpdateErrors = $JsonParameters.PSobject.Properties["ruleUpdateErrors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateErrors"))) {
            throw "Error! JSON cannot be serialized due to the required property 'updateErrors' missing."
        } else {
            $UpdateErrors = $JsonParameters.PSobject.Properties["updateErrors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workflowId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'workflowId' missing."
        } else {
            $WorkflowId = $JsonParameters.PSobject.Properties["workflowId"].value
        }

        $PSO = [PSCustomObject]@{
            "ruleUpdateErrors" = ${RuleUpdateErrors}
            "updateErrors" = ${UpdateErrors}
            "workflowId" = ${WorkflowId}
        }

        return $PSO
    }

}


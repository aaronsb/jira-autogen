#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Contains details about a version approver.

.PARAMETER AccountId
The Atlassian account ID of the approver.
.PARAMETER DeclineReason
A description of why the user is declining the approval.
.PARAMETER Description
A description of what the user is approving within the specified version.
.PARAMETER Status
The status of the approval, which can be *PENDING*, *APPROVED*, or *DECLINED*
.OUTPUTS

VersionApprover<PSCustomObject>
#>

function Initialize-VersionApprover {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccountId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeclineReason},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status}
    )

    Process {
        'Creating PSCustomObject: PSJira => VersionApprover' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "accountId" = ${AccountId}
            "declineReason" = ${DeclineReason}
            "description" = ${Description}
            "status" = ${Status}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VersionApprover<PSCustomObject>

.DESCRIPTION

Convert from JSON to VersionApprover<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VersionApprover<PSCustomObject>
#>
function ConvertFrom-JsonToVersionApprover {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => VersionApprover' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $VersionApproverAdditionalProperties = @{}

        # check if Json contains properties not defined in VersionApprover
        $AllProperties = ("accountId", "declineReason", "description", "status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $VersionApproverAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountId"))) { #optional property not found
            $AccountId = $null
        } else {
            $AccountId = $JsonParameters.PSobject.Properties["accountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "declineReason"))) { #optional property not found
            $DeclineReason = $null
        } else {
            $DeclineReason = $JsonParameters.PSobject.Properties["declineReason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        $PSO = [PSCustomObject]@{
            "accountId" = ${AccountId}
            "declineReason" = ${DeclineReason}
            "description" = ${Description}
            "status" = ${Status}
            "AdditionalProperties" = $VersionApproverAdditionalProperties
        }

        return $PSO
    }

}


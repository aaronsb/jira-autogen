#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ErrorMessages
The list of error messages produced by this operation. For example, ""input parameter 'key' must be provided""
.PARAMETER Errors
The list of errors by parameter returned by the operation. For example,""projectKey"": ""Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.""
.PARAMETER HttpStatusCode
No description available.
.OUTPUTS

SimpleErrorCollection<PSCustomObject>
#>

function Initialize-SimpleErrorCollection {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ErrorMessages},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Errors},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HttpStatusCode}
    )

    Process {
        'Creating PSCustomObject: PSJira => SimpleErrorCollection' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "errorMessages" = ${ErrorMessages}
            "errors" = ${Errors}
            "httpStatusCode" = ${HttpStatusCode}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SimpleErrorCollection<PSCustomObject>

.DESCRIPTION

Convert from JSON to SimpleErrorCollection<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SimpleErrorCollection<PSCustomObject>
#>
function ConvertFrom-JsonToSimpleErrorCollection {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => SimpleErrorCollection' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SimpleErrorCollection
        $AllProperties = ("errorMessages", "errors", "httpStatusCode")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorMessages"))) { #optional property not found
            $ErrorMessages = $null
        } else {
            $ErrorMessages = $JsonParameters.PSobject.Properties["errorMessages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) { #optional property not found
            $Errors = $null
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "httpStatusCode"))) { #optional property not found
            $HttpStatusCode = $null
        } else {
            $HttpStatusCode = $JsonParameters.PSobject.Properties["httpStatusCode"].value
        }

        $PSO = [PSCustomObject]@{
            "errorMessages" = ${ErrorMessages}
            "errors" = ${Errors}
            "httpStatusCode" = ${HttpStatusCode}
        }

        return $PSO
    }

}


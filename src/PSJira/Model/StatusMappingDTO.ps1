#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The mapping of old to new status ID for a specific project and issue type.

.PARAMETER IssueTypeId
The issue type for the status mapping.
.PARAMETER ProjectId
The project for the status mapping.
.PARAMETER StatusMigrations
The list of old and new status ID mappings for the specified project and issue type.
.OUTPUTS

StatusMappingDTO<PSCustomObject>
#>

function Initialize-StatusMappingDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueTypeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${StatusMigrations}
    )

    Process {
        'Creating PSCustomObject: PSJira => StatusMappingDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $IssueTypeId) {
            throw "invalid value for 'IssueTypeId', 'IssueTypeId' cannot be null."
        }

        if ($null -eq $ProjectId) {
            throw "invalid value for 'ProjectId', 'ProjectId' cannot be null."
        }

        if ($null -eq $StatusMigrations) {
            throw "invalid value for 'StatusMigrations', 'StatusMigrations' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "issueTypeId" = ${IssueTypeId}
            "projectId" = ${ProjectId}
            "statusMigrations" = ${StatusMigrations}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to StatusMappingDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to StatusMappingDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

StatusMappingDTO<PSCustomObject>
#>
function ConvertFrom-JsonToStatusMappingDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => StatusMappingDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $StatusMappingDTOAdditionalProperties = @{}

        # check if Json contains properties not defined in StatusMappingDTO
        $AllProperties = ("issueTypeId", "projectId", "statusMigrations")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $StatusMappingDTOAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'issueTypeId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueTypeId' missing."
        } else {
            $IssueTypeId = $JsonParameters.PSobject.Properties["issueTypeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'projectId' missing."
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusMigrations"))) {
            throw "Error! JSON cannot be serialized due to the required property 'statusMigrations' missing."
        } else {
            $StatusMigrations = $JsonParameters.PSobject.Properties["statusMigrations"].value
        }

        $PSO = [PSCustomObject]@{
            "issueTypeId" = ${IssueTypeId}
            "projectId" = ${ProjectId}
            "statusMigrations" = ${StatusMigrations}
            "AdditionalProperties" = $StatusMappingDTOAdditionalProperties
        }

        return $PSO
    }

}


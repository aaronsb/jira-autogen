#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a link between issues.

.PARAMETER Id
The ID of the issue link.
.PARAMETER InwardIssue
Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.
.PARAMETER OutwardIssue
Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.
.PARAMETER Self
The URL of the issue link.
.PARAMETER Type
The type of link between the issues.
.OUTPUTS

IssueLink<PSCustomObject>
#>

function Initialize-IssueLink {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InwardIssue},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OutwardIssue},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $InwardIssue) {
            throw "invalid value for 'InwardIssue', 'InwardIssue' cannot be null."
        }

        if ($null -eq $OutwardIssue) {
            throw "invalid value for 'OutwardIssue', 'OutwardIssue' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "inwardIssue" = ${InwardIssue}
            "outwardIssue" = ${OutwardIssue}
            "self" = ${Self}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueLink<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueLink<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueLink<PSCustomObject>
#>
function ConvertFrom-JsonToIssueLink {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueLink
        $AllProperties = ("id", "inwardIssue", "outwardIssue", "self", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'inwardIssue' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inwardIssue"))) {
            throw "Error! JSON cannot be serialized due to the required property 'inwardIssue' missing."
        } else {
            $InwardIssue = $JsonParameters.PSobject.Properties["inwardIssue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "outwardIssue"))) {
            throw "Error! JSON cannot be serialized due to the required property 'outwardIssue' missing."
        } else {
            $OutwardIssue = $JsonParameters.PSobject.Properties["outwardIssue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "inwardIssue" = ${InwardIssue}
            "outwardIssue" = ${OutwardIssue}
            "self" = ${Self}
            "type" = ${Type}
        }

        return $PSO
    }

}


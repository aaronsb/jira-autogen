#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The group or role to which this item is visible.

.PARAMETER Identifier
The ID of the group or the name of the role that visibility of this item is restricted to.
.PARAMETER Type
Whether visibility of this item is restricted to a group or role.
.PARAMETER Value
The name of the group or role that visibility of this item is restricted to. Please note that the name of a group is mutable, to reliably identify a group use `identifier`.
.OUTPUTS

Visibility<PSCustomObject>
#>

function Initialize-Visibility {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Identifier},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("group", "role")]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value}
    )

    Process {
        'Creating PSCustomObject: PSJira => Visibility' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "identifier" = ${Identifier}
            "type" = ${Type}
            "value" = ${Value}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Visibility<PSCustomObject>

.DESCRIPTION

Convert from JSON to Visibility<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Visibility<PSCustomObject>
#>
function ConvertFrom-JsonToVisibility {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Visibility' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $VisibilityAdditionalProperties = @{}

        # check if Json contains properties not defined in Visibility
        $AllProperties = ("identifier", "type", "value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $VisibilityAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identifier"))) { #optional property not found
            $Identifier = $null
        } else {
            $Identifier = $JsonParameters.PSobject.Properties["identifier"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        $PSO = [PSCustomObject]@{
            "identifier" = ${Identifier}
            "type" = ${Type}
            "value" = ${Value}
            "AdditionalProperties" = $VisibilityAdditionalProperties
        }

        return $PSO
    }

}


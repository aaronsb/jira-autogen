#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Beans
The number of Jira REST API beans returned in the response.
.PARAMETER ExpensiveOperations
The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
.PARAMETER PrimitiveValues
The number of primitive values returned in the response.
.PARAMETER Steps
The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
.OUTPUTS

JiraExpressionsComplexityBean<PSCustomObject>
#>

function Initialize-JiraExpressionsComplexityBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Beans},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ExpensiveOperations},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrimitiveValues},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Steps}
    )

    Process {
        'Creating PSCustomObject: PSJira => JiraExpressionsComplexityBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Beans) {
            throw "invalid value for 'Beans', 'Beans' cannot be null."
        }

        if ($null -eq $ExpensiveOperations) {
            throw "invalid value for 'ExpensiveOperations', 'ExpensiveOperations' cannot be null."
        }

        if ($null -eq $PrimitiveValues) {
            throw "invalid value for 'PrimitiveValues', 'PrimitiveValues' cannot be null."
        }

        if ($null -eq $Steps) {
            throw "invalid value for 'Steps', 'Steps' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "beans" = ${Beans}
            "expensiveOperations" = ${ExpensiveOperations}
            "primitiveValues" = ${PrimitiveValues}
            "steps" = ${Steps}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JiraExpressionsComplexityBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to JiraExpressionsComplexityBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JiraExpressionsComplexityBean<PSCustomObject>
#>
function ConvertFrom-JsonToJiraExpressionsComplexityBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JiraExpressionsComplexityBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JiraExpressionsComplexityBean
        $AllProperties = ("beans", "expensiveOperations", "primitiveValues", "steps")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'beans' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "beans"))) {
            throw "Error! JSON cannot be serialized due to the required property 'beans' missing."
        } else {
            $Beans = $JsonParameters.PSobject.Properties["beans"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expensiveOperations"))) {
            throw "Error! JSON cannot be serialized due to the required property 'expensiveOperations' missing."
        } else {
            $ExpensiveOperations = $JsonParameters.PSobject.Properties["expensiveOperations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primitiveValues"))) {
            throw "Error! JSON cannot be serialized due to the required property 'primitiveValues' missing."
        } else {
            $PrimitiveValues = $JsonParameters.PSobject.Properties["primitiveValues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "steps"))) {
            throw "Error! JSON cannot be serialized due to the required property 'steps' missing."
        } else {
            $Steps = $JsonParameters.PSobject.Properties["steps"].value
        }

        $PSO = [PSCustomObject]@{
            "beans" = ${Beans}
            "expensiveOperations" = ${ExpensiveOperations}
            "primitiveValues" = ${PrimitiveValues}
            "steps" = ${Steps}
        }

        return $PSO
    }

}


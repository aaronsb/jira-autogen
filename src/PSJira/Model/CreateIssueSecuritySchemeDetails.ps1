#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Issue security scheme and it's details

.PARAMETER Description
The description of the issue security scheme.
.PARAMETER Levels
The list of scheme levels which should be added to the security scheme.
.PARAMETER Name
The name of the issue security scheme. Must be unique (case-insensitive).
.OUTPUTS

CreateIssueSecuritySchemeDetails<PSCustomObject>
#>

function Initialize-CreateIssueSecuritySchemeDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Levels},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: PSJira => CreateIssueSecuritySchemeDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Description -and $Description.length -gt 255) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 255."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 60) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 60."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "levels" = ${Levels}
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateIssueSecuritySchemeDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateIssueSecuritySchemeDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateIssueSecuritySchemeDetails<PSCustomObject>
#>
function ConvertFrom-JsonToCreateIssueSecuritySchemeDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => CreateIssueSecuritySchemeDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $CreateIssueSecuritySchemeDetailsAdditionalProperties = @{}

        # check if Json contains properties not defined in CreateIssueSecuritySchemeDetails
        $AllProperties = ("description", "levels", "name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $CreateIssueSecuritySchemeDetailsAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "levels"))) { #optional property not found
            $Levels = $null
        } else {
            $Levels = $JsonParameters.PSobject.Properties["levels"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "levels" = ${Levels}
            "name" = ${Name}
            "AdditionalProperties" = $CreateIssueSecuritySchemeDetailsAdditionalProperties
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConnectRules
The Connect provided ecosystem rules available.
.PARAMETER EditorScope
The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
.PARAMETER ForgeRules
The Forge provided ecosystem rules available.
.PARAMETER ProjectTypes
The types of projects that this capability set is available for.
.PARAMETER SystemRules
The Atlassian provided system rules available.
.PARAMETER TriggerRules
The trigger rules available.
.OUTPUTS

WorkflowCapabilities<PSCustomObject>
#>

function Initialize-WorkflowCapabilities {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ConnectRules},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PROJECT", "GLOBAL")]
        [String]
        ${EditorScope},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ForgeRules},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("software", "service_desk", "product_discovery", "business", "unknown")]
        [String[]]
        ${ProjectTypes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SystemRules},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TriggerRules}
    )

    Process {
        'Creating PSCustomObject: PSJira => WorkflowCapabilities' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "connectRules" = ${ConnectRules}
            "editorScope" = ${EditorScope}
            "forgeRules" = ${ForgeRules}
            "projectTypes" = ${ProjectTypes}
            "systemRules" = ${SystemRules}
            "triggerRules" = ${TriggerRules}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowCapabilities<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowCapabilities<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowCapabilities<PSCustomObject>
#>
function ConvertFrom-JsonToWorkflowCapabilities {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => WorkflowCapabilities' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WorkflowCapabilities
        $AllProperties = ("connectRules", "editorScope", "forgeRules", "projectTypes", "systemRules", "triggerRules")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectRules"))) { #optional property not found
            $ConnectRules = $null
        } else {
            $ConnectRules = $JsonParameters.PSobject.Properties["connectRules"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "editorScope"))) { #optional property not found
            $EditorScope = $null
        } else {
            $EditorScope = $JsonParameters.PSobject.Properties["editorScope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "forgeRules"))) { #optional property not found
            $ForgeRules = $null
        } else {
            $ForgeRules = $JsonParameters.PSobject.Properties["forgeRules"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectTypes"))) { #optional property not found
            $ProjectTypes = $null
        } else {
            $ProjectTypes = $JsonParameters.PSobject.Properties["projectTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemRules"))) { #optional property not found
            $SystemRules = $null
        } else {
            $SystemRules = $JsonParameters.PSobject.Properties["systemRules"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "triggerRules"))) { #optional property not found
            $TriggerRules = $null
        } else {
            $TriggerRules = $JsonParameters.PSobject.Properties["triggerRules"].value
        }

        $PSO = [PSCustomObject]@{
            "connectRules" = ${ConnectRules}
            "editorScope" = ${EditorScope}
            "forgeRules" = ${ForgeRules}
            "projectTypes" = ${ProjectTypes}
            "systemRules" = ${SystemRules}
            "triggerRules" = ${TriggerRules}
        }

        return $PSO
    }

}


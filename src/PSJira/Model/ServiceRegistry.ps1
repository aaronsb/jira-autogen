#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Description
service description
.PARAMETER Id
service ID
.PARAMETER Name
service name
.PARAMETER OrganizationId
organization ID
.PARAMETER Revision
service revision
.PARAMETER ServiceTier
No description available.
.OUTPUTS

ServiceRegistry<PSCustomObject>
#>

function Initialize-ServiceRegistry {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrganizationId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Revision},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ServiceTier}
    )

    Process {
        'Creating PSCustomObject: PSJira => ServiceRegistry' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "organizationId" = ${OrganizationId}
            "revision" = ${Revision}
            "serviceTier" = ${ServiceTier}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServiceRegistry<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServiceRegistry<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServiceRegistry<PSCustomObject>
#>
function ConvertFrom-JsonToServiceRegistry {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ServiceRegistry' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ServiceRegistry
        $AllProperties = ("description", "id", "name", "organizationId", "revision", "serviceTier")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organizationId"))) { #optional property not found
            $OrganizationId = $null
        } else {
            $OrganizationId = $JsonParameters.PSobject.Properties["organizationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revision"))) { #optional property not found
            $Revision = $null
        } else {
            $Revision = $JsonParameters.PSobject.Properties["revision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceTier"))) { #optional property not found
            $ServiceTier = $null
        } else {
            $ServiceTier = $JsonParameters.PSobject.Properties["serviceTier"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "name" = ${Name}
            "organizationId" = ${OrganizationId}
            "revision" = ${Revision}
            "serviceTier" = ${ServiceTier}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Group
The name of the group to add as a default actor. This parameter cannot be used with the `groupId` parameter. As a group's name can change,use of `groupId` is recommended. This parameter accepts a comma-separated list. For example, `""group"":[""project-admin"", ""jira-developers""]`.
.PARAMETER GroupId
The ID of the group to add as a default actor. This parameter cannot be used with the `group` parameter This parameter accepts a comma-separated list. For example, `""groupId"":[""77f6ab39-e755-4570-a6ae-2d7a8df0bcb8"", ""0c011f85-69ed-49c4-a801-3b18d0f771bc""]`.
.PARAMETER User
The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `""user"":[""5b10a2844c20165700ede21g"", ""5b109f2e9729b51b54dc274d""]`.
.OUTPUTS

ActorInputBean<PSCustomObject>
#>

function Initialize-ActorInputBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Group},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${GroupId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${User}
    )

    Process {
        'Creating PSCustomObject: PSJira => ActorInputBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "group" = ${Group}
            "groupId" = ${GroupId}
            "user" = ${User}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ActorInputBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to ActorInputBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ActorInputBean<PSCustomObject>
#>
function ConvertFrom-JsonToActorInputBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ActorInputBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ActorInputBean
        $AllProperties = ("group", "groupId", "user")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group"))) { #optional property not found
            $Group = $null
        } else {
            $Group = $JsonParameters.PSobject.Properties["group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupId"))) { #optional property not found
            $GroupId = $null
        } else {
            $GroupId = $JsonParameters.PSobject.Properties["groupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        $PSO = [PSCustomObject]@{
            "group" = ${Group}
            "groupId" = ${GroupId}
            "user" = ${User}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The transitions of this workflow.

.PARAMETER Actions
The post-functions of the transition.
.PARAMETER Conditions
No description available.
.PARAMETER CustomIssueEventId
The custom event ID of the transition.
.PARAMETER Description
The description of the transition.
.PARAMETER VarFrom
The statuses the transition can start from.
.PARAMETER Id
The ID of the transition.
.PARAMETER Name
The name of the transition.
.PARAMETER Properties
The properties of the transition.
.PARAMETER To
No description available.
.PARAMETER TransitionScreen
No description available.
.PARAMETER Triggers
The triggers of the transition.
.PARAMETER Type
The transition type.
.PARAMETER Validators
The validators of the transition.
.OUTPUTS

TransitionUpdateDTO<PSCustomObject>
#>

function Initialize-TransitionUpdateDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Actions},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Conditions},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomIssueEventId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VarFrom},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Properties},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${To},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TransitionScreen},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Triggers},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("INITIAL", "GLOBAL", "DIRECTED")]
        [String]
        ${Type},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Validators}
    )

    Process {
        'Creating PSCustomObject: PSJira => TransitionUpdateDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "actions" = ${Actions}
            "conditions" = ${Conditions}
            "customIssueEventId" = ${CustomIssueEventId}
            "description" = ${Description}
            "from" = ${VarFrom}
            "id" = ${Id}
            "name" = ${Name}
            "properties" = ${Properties}
            "to" = ${To}
            "transitionScreen" = ${TransitionScreen}
            "triggers" = ${Triggers}
            "type" = ${Type}
            "validators" = ${Validators}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TransitionUpdateDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to TransitionUpdateDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TransitionUpdateDTO<PSCustomObject>
#>
function ConvertFrom-JsonToTransitionUpdateDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => TransitionUpdateDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $TransitionUpdateDTOAdditionalProperties = @{}

        # check if Json contains properties not defined in TransitionUpdateDTO
        $AllProperties = ("actions", "conditions", "customIssueEventId", "description", "from", "id", "name", "properties", "to", "transitionScreen", "triggers", "type", "validators")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $TransitionUpdateDTOAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actions"))) { #optional property not found
            $Actions = $null
        } else {
            $Actions = $JsonParameters.PSobject.Properties["actions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conditions"))) { #optional property not found
            $Conditions = $null
        } else {
            $Conditions = $JsonParameters.PSobject.Properties["conditions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customIssueEventId"))) { #optional property not found
            $CustomIssueEventId = $null
        } else {
            $CustomIssueEventId = $JsonParameters.PSobject.Properties["customIssueEventId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) { #optional property not found
            $VarFrom = $null
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) { #optional property not found
            $To = $null
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transitionScreen"))) { #optional property not found
            $TransitionScreen = $null
        } else {
            $TransitionScreen = $JsonParameters.PSobject.Properties["transitionScreen"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "triggers"))) { #optional property not found
            $Triggers = $null
        } else {
            $Triggers = $JsonParameters.PSobject.Properties["triggers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validators"))) { #optional property not found
            $Validators = $null
        } else {
            $Validators = $JsonParameters.PSobject.Properties["validators"].value
        }

        $PSO = [PSCustomObject]@{
            "actions" = ${Actions}
            "conditions" = ${Conditions}
            "customIssueEventId" = ${CustomIssueEventId}
            "description" = ${Description}
            "from" = ${VarFrom}
            "id" = ${Id}
            "name" = ${Name}
            "properties" = ${Properties}
            "to" = ${To}
            "transitionScreen" = ${TransitionScreen}
            "triggers" = ${Triggers}
            "type" = ${Type}
            "validators" = ${Validators}
            "AdditionalProperties" = $TransitionUpdateDTOAdditionalProperties
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the time tracking configuration.

.PARAMETER DefaultUnit
The default unit of time applied to logged time.
.PARAMETER TimeFormat
The format that will appear on an issue's *Time Spent* field.
.PARAMETER WorkingDaysPerWeek
The number of days in a working week.
.PARAMETER WorkingHoursPerDay
The number of hours in a working day.
.OUTPUTS

TimeTrackingConfiguration<PSCustomObject>
#>

function Initialize-TimeTrackingConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("minute", "hour", "day", "week")]
        [String]
        ${DefaultUnit},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("pretty", "days", "hours")]
        [String]
        ${TimeFormat},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${WorkingDaysPerWeek},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${WorkingHoursPerDay}
    )

    Process {
        'Creating PSCustomObject: PSJira => TimeTrackingConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DefaultUnit) {
            throw "invalid value for 'DefaultUnit', 'DefaultUnit' cannot be null."
        }

        if ($null -eq $TimeFormat) {
            throw "invalid value for 'TimeFormat', 'TimeFormat' cannot be null."
        }

        if ($null -eq $WorkingDaysPerWeek) {
            throw "invalid value for 'WorkingDaysPerWeek', 'WorkingDaysPerWeek' cannot be null."
        }

        if ($null -eq $WorkingHoursPerDay) {
            throw "invalid value for 'WorkingHoursPerDay', 'WorkingHoursPerDay' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "defaultUnit" = ${DefaultUnit}
            "timeFormat" = ${TimeFormat}
            "workingDaysPerWeek" = ${WorkingDaysPerWeek}
            "workingHoursPerDay" = ${WorkingHoursPerDay}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TimeTrackingConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to TimeTrackingConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TimeTrackingConfiguration<PSCustomObject>
#>
function ConvertFrom-JsonToTimeTrackingConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => TimeTrackingConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TimeTrackingConfiguration
        $AllProperties = ("defaultUnit", "timeFormat", "workingDaysPerWeek", "workingHoursPerDay")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'defaultUnit' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultUnit"))) {
            throw "Error! JSON cannot be serialized due to the required property 'defaultUnit' missing."
        } else {
            $DefaultUnit = $JsonParameters.PSobject.Properties["defaultUnit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeFormat"))) {
            throw "Error! JSON cannot be serialized due to the required property 'timeFormat' missing."
        } else {
            $TimeFormat = $JsonParameters.PSobject.Properties["timeFormat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workingDaysPerWeek"))) {
            throw "Error! JSON cannot be serialized due to the required property 'workingDaysPerWeek' missing."
        } else {
            $WorkingDaysPerWeek = $JsonParameters.PSobject.Properties["workingDaysPerWeek"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workingHoursPerDay"))) {
            throw "Error! JSON cannot be serialized due to the required property 'workingHoursPerDay' missing."
        } else {
            $WorkingHoursPerDay = $JsonParameters.PSobject.Properties["workingHoursPerDay"].value
        }

        $PSO = [PSCustomObject]@{
            "defaultUnit" = ${DefaultUnit}
            "timeFormat" = ${TimeFormat}
            "workingDaysPerWeek" = ${WorkingDaysPerWeek}
            "workingHoursPerDay" = ${WorkingHoursPerDay}
        }

        return $PSO
    }

}


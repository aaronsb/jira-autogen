#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about data policies for a project.

.PARAMETER DataPolicy
No description available.
.PARAMETER Id
The project ID.
.OUTPUTS

ProjectWithDataPolicy<PSCustomObject>
#>

function Initialize-ProjectWithDataPolicy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DataPolicy},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id}
    )

    Process {
        'Creating PSCustomObject: PSJira => ProjectWithDataPolicy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "dataPolicy" = ${DataPolicy}
            "id" = ${Id}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectWithDataPolicy<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectWithDataPolicy<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectWithDataPolicy<PSCustomObject>
#>
function ConvertFrom-JsonToProjectWithDataPolicy {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ProjectWithDataPolicy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectWithDataPolicy
        $AllProperties = ("dataPolicy", "id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dataPolicy"))) { #optional property not found
            $DataPolicy = $null
        } else {
            $DataPolicy = $JsonParameters.PSobject.Properties["dataPolicy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        $PSO = [PSCustomObject]@{
            "dataPolicy" = ${DataPolicy}
            "id" = ${Id}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The details of an issue type screen scheme.

.PARAMETER Description
The description of the issue type screen scheme. The maximum length is 255 characters.
.PARAMETER IssueTypeMappings
The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.
.PARAMETER Name
The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
.OUTPUTS

IssueTypeScreenSchemeDetails<PSCustomObject>
#>

function Initialize-IssueTypeScreenSchemeDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${IssueTypeMappings},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueTypeScreenSchemeDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $IssueTypeMappings) {
            throw "invalid value for 'IssueTypeMappings', 'IssueTypeMappings' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "issueTypeMappings" = ${IssueTypeMappings}
            "name" = ${Name}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueTypeScreenSchemeDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueTypeScreenSchemeDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueTypeScreenSchemeDetails<PSCustomObject>
#>
function ConvertFrom-JsonToIssueTypeScreenSchemeDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueTypeScreenSchemeDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueTypeScreenSchemeDetails
        $AllProperties = ("description", "issueTypeMappings", "name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'issueTypeMappings' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeMappings"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueTypeMappings' missing."
        } else {
            $IssueTypeMappings = $JsonParameters.PSobject.Properties["issueTypeMappings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "issueTypeMappings" = ${IssueTypeMappings}
            "name" = ${Name}
        }

        return $PSO
    }

}


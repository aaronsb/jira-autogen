#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Announcement banner configuration.

.PARAMETER HashId
Hash of the banner data. The client detects updates by comparing hash IDs.
.PARAMETER IsDismissible
Flag indicating if the announcement banner can be dismissed by the user.
.PARAMETER IsEnabled
Flag indicating if the announcement banner is enabled or not.
.PARAMETER Message
The text on the announcement banner.
.PARAMETER Visibility
Visibility of the announcement banner.
.OUTPUTS

AnnouncementBannerConfiguration<PSCustomObject>
#>

function Initialize-AnnouncementBannerConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HashId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDismissible},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsEnabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PUBLIC", "PRIVATE")]
        [String]
        ${Visibility}
    )

    Process {
        'Creating PSCustomObject: PSJira => AnnouncementBannerConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "hashId" = ${HashId}
            "isDismissible" = ${IsDismissible}
            "isEnabled" = ${IsEnabled}
            "message" = ${Message}
            "visibility" = ${Visibility}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AnnouncementBannerConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to AnnouncementBannerConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AnnouncementBannerConfiguration<PSCustomObject>
#>
function ConvertFrom-JsonToAnnouncementBannerConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => AnnouncementBannerConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AnnouncementBannerConfiguration
        $AllProperties = ("hashId", "isDismissible", "isEnabled", "message", "visibility")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hashId"))) { #optional property not found
            $HashId = $null
        } else {
            $HashId = $JsonParameters.PSobject.Properties["hashId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDismissible"))) { #optional property not found
            $IsDismissible = $null
        } else {
            $IsDismissible = $JsonParameters.PSobject.Properties["isDismissible"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isEnabled"))) { #optional property not found
            $IsEnabled = $null
        } else {
            $IsEnabled = $JsonParameters.PSobject.Properties["isEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        $PSO = [PSCustomObject]@{
            "hashId" = ${HashId}
            "isDismissible" = ${IsDismissible}
            "isEnabled" = ${IsEnabled}
            "message" = ${Message}
            "visibility" = ${Visibility}
        }

        return $PSO
    }

}


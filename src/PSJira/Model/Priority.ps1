#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An issue priority.

.PARAMETER Description
The description of the issue priority.
.PARAMETER IconUrl
The URL of the icon for the issue priority.
.PARAMETER Id
The ID of the issue priority.
.PARAMETER IsDefault
Whether this priority is the default.
.PARAMETER Name
The name of the issue priority.
.PARAMETER Self
The URL of the issue priority.
.PARAMETER StatusColor
The color used to indicate the issue priority.
.OUTPUTS

Priority<PSCustomObject>
#>

function Initialize-Priority {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IconUrl},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDefault},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusColor}
    )

    Process {
        'Creating PSCustomObject: PSJira => Priority' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "iconUrl" = ${IconUrl}
            "id" = ${Id}
            "isDefault" = ${IsDefault}
            "name" = ${Name}
            "self" = ${Self}
            "statusColor" = ${StatusColor}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Priority<PSCustomObject>

.DESCRIPTION

Convert from JSON to Priority<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Priority<PSCustomObject>
#>
function ConvertFrom-JsonToPriority {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Priority' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $PriorityAdditionalProperties = @{}

        # check if Json contains properties not defined in Priority
        $AllProperties = ("description", "iconUrl", "id", "isDefault", "name", "self", "statusColor")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $PriorityAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iconUrl"))) { #optional property not found
            $IconUrl = $null
        } else {
            $IconUrl = $JsonParameters.PSobject.Properties["iconUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDefault"))) { #optional property not found
            $IsDefault = $null
        } else {
            $IsDefault = $JsonParameters.PSobject.Properties["isDefault"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusColor"))) { #optional property not found
            $StatusColor = $null
        } else {
            $StatusColor = $JsonParameters.PSobject.Properties["statusColor"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "iconUrl" = ${IconUrl}
            "id" = ${Id}
            "isDefault" = ${IsDefault}
            "name" = ${Name}
            "self" = ${Self}
            "statusColor" = ${StatusColor}
            "AdditionalProperties" = $PriorityAdditionalProperties
        }

        return $PSO
    }

}


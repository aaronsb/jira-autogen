#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The account ID of the new owner.

.PARAMETER AccountId
The account ID of the new owner.
.OUTPUTS

ChangeFilterOwner<PSCustomObject>
#>

function Initialize-ChangeFilterOwner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccountId}
    )

    Process {
        'Creating PSCustomObject: PSJira => ChangeFilterOwner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $AccountId) {
            throw "invalid value for 'AccountId', 'AccountId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "accountId" = ${AccountId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ChangeFilterOwner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ChangeFilterOwner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ChangeFilterOwner<PSCustomObject>
#>
function ConvertFrom-JsonToChangeFilterOwner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ChangeFilterOwner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ChangeFilterOwner
        $AllProperties = ("accountId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'accountId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'accountId' missing."
        } else {
            $AccountId = $JsonParameters.PSobject.Properties["accountId"].value
        }

        $PSO = [PSCustomObject]@{
            "accountId" = ${AccountId}
        }

        return $PSO
    }

}


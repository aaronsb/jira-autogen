#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:   *  `line` and `column`  *  `expression`

.PARAMETER Column
The text column in which the error occurred.
.PARAMETER Expression
The part of the expression in which the error occurred.
.PARAMETER Line
The text line in which the error occurred.
.PARAMETER Message
Details about the error.
.PARAMETER Type
The error type.
.OUTPUTS

JiraExpressionValidationError<PSCustomObject>
#>

function Initialize-JiraExpressionValidationError {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Column},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expression},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Line},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("syntax", "type", "other")]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSJira => JiraExpressionValidationError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Message) {
            throw "invalid value for 'Message', 'Message' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "column" = ${Column}
            "expression" = ${Expression}
            "line" = ${Line}
            "message" = ${Message}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JiraExpressionValidationError<PSCustomObject>

.DESCRIPTION

Convert from JSON to JiraExpressionValidationError<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JiraExpressionValidationError<PSCustomObject>
#>
function ConvertFrom-JsonToJiraExpressionValidationError {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JiraExpressionValidationError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JiraExpressionValidationError
        $AllProperties = ("column", "expression", "line", "message", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'message' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) {
            throw "Error! JSON cannot be serialized due to the required property 'message' missing."
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "column"))) { #optional property not found
            $Column = $null
        } else {
            $Column = $JsonParameters.PSobject.Properties["column"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expression"))) { #optional property not found
            $Expression = $null
        } else {
            $Expression = $JsonParameters.PSobject.Properties["expression"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "line"))) { #optional property not found
            $Line = $null
        } else {
            $Line = $JsonParameters.PSobject.Properties["line"].value
        }

        $PSO = [PSCustomObject]@{
            "column" = ${Column}
            "expression" = ${Expression}
            "line" = ${Line}
            "message" = ${Message}
            "type" = ${Type}
        }

        return $PSO
    }

}


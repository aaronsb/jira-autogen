#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A webhook.

.PARAMETER Events
The Jira events that trigger the webhook.
.PARAMETER ExpirationDate
The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
.PARAMETER FieldIdsFilter
A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
.PARAMETER Id
The ID of the webhook.
.PARAMETER IssuePropertyKeysFilter
A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
.PARAMETER JqlFilter
The JQL filter that specifies which issues the webhook is sent for.
.OUTPUTS

Webhook<PSCustomObject>
#>

function Initialize-Webhook {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("jira:issue_created", "jira:issue_updated", "jira:issue_deleted", "comment_created", "comment_updated", "comment_deleted", "issue_property_set", "issue_property_deleted")]
        [String[]]
        ${Events},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ExpirationDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${FieldIdsFilter},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IssuePropertyKeysFilter},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JqlFilter}
    )

    Process {
        'Creating PSCustomObject: PSJira => Webhook' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Events) {
            throw "invalid value for 'Events', 'Events' cannot be null."
        }

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $JqlFilter) {
            throw "invalid value for 'JqlFilter', 'JqlFilter' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "events" = ${Events}
            "expirationDate" = ${ExpirationDate}
            "fieldIdsFilter" = ${FieldIdsFilter}
            "id" = ${Id}
            "issuePropertyKeysFilter" = ${IssuePropertyKeysFilter}
            "jqlFilter" = ${JqlFilter}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Webhook<PSCustomObject>

.DESCRIPTION

Convert from JSON to Webhook<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Webhook<PSCustomObject>
#>
function ConvertFrom-JsonToWebhook {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Webhook' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Webhook
        $AllProperties = ("events", "expirationDate", "fieldIdsFilter", "id", "issuePropertyKeysFilter", "jqlFilter")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'events' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "events"))) {
            throw "Error! JSON cannot be serialized due to the required property 'events' missing."
        } else {
            $Events = $JsonParameters.PSobject.Properties["events"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jqlFilter"))) {
            throw "Error! JSON cannot be serialized due to the required property 'jqlFilter' missing."
        } else {
            $JqlFilter = $JsonParameters.PSobject.Properties["jqlFilter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expirationDate"))) { #optional property not found
            $ExpirationDate = $null
        } else {
            $ExpirationDate = $JsonParameters.PSobject.Properties["expirationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fieldIdsFilter"))) { #optional property not found
            $FieldIdsFilter = $null
        } else {
            $FieldIdsFilter = $JsonParameters.PSobject.Properties["fieldIdsFilter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuePropertyKeysFilter"))) { #optional property not found
            $IssuePropertyKeysFilter = $null
        } else {
            $IssuePropertyKeysFilter = $JsonParameters.PSobject.Properties["issuePropertyKeysFilter"].value
        }

        $PSO = [PSCustomObject]@{
            "events" = ${Events}
            "expirationDate" = ${ExpirationDate}
            "fieldIdsFilter" = ${FieldIdsFilter}
            "id" = ${Id}
            "issuePropertyKeysFilter" = ${IssuePropertyKeysFilter}
            "jqlFilter" = ${JqlFilter}
        }

        return $PSO
    }

}


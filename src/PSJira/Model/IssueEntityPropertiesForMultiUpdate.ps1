#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An issue ID with entity property values. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.

.PARAMETER IssueID
The ID of the issue.
.PARAMETER Properties
Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters.
.OUTPUTS

IssueEntityPropertiesForMultiUpdate<PSCustomObject>
#>

function Initialize-IssueEntityPropertiesForMultiUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${IssueID},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Properties}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueEntityPropertiesForMultiUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Properties -and $Properties.length -gt 10) {
            throw "invalid value for 'Properties', number of items must be less than or equal to 10."
        }

        if (!$Properties -and $Properties.length -lt 1) {
            throw "invalid value for 'Properties', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "issueID" = ${IssueID}
            "properties" = ${Properties}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueEntityPropertiesForMultiUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueEntityPropertiesForMultiUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueEntityPropertiesForMultiUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToIssueEntityPropertiesForMultiUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueEntityPropertiesForMultiUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueEntityPropertiesForMultiUpdate
        $AllProperties = ("issueID", "properties")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueID"))) { #optional property not found
            $IssueID = $null
        } else {
            $IssueID = $JsonParameters.PSobject.Properties["issueID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        $PSO = [PSCustomObject]@{
            "issueID" = ${IssueID}
            "properties" = ${Properties}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A JQL query clause.

.PARAMETER Json

JSON object

.OUTPUTS

JqlQueryClause<PSCustomObject>
#>
function ConvertFrom-JsonToJqlQueryClause {
    [CmdletBinding()]
    Param (
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        $match = 0
        $matchType = $null
        $matchInstance = $null

        if ($match -ne 0) { # no match yet
            # try to match CompoundClause defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToCompoundClause $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "CompoundClause"
                        $match++
                        break
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf, proceed to the next one
                Write-Debug "Failed to match 'CompoundClause' defined in anyOf (JqlQueryClause). Proceeding to the next one if any."
            }
        }

        if ($match -ne 0) { # no match yet
            # try to match FieldChangedClause defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToFieldChangedClause $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "FieldChangedClause"
                        $match++
                        break
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf, proceed to the next one
                Write-Debug "Failed to match 'FieldChangedClause' defined in anyOf (JqlQueryClause). Proceeding to the next one if any."
            }
        }

        if ($match -ne 0) { # no match yet
            # try to match FieldValueClause defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToFieldValueClause $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "FieldValueClause"
                        $match++
                        break
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf, proceed to the next one
                Write-Debug "Failed to match 'FieldValueClause' defined in anyOf (JqlQueryClause). Proceeding to the next one if any."
            }
        }

        if ($match -ne 0) { # no match yet
            # try to match FieldWasClause defined in the anyOf schemas
            try {
                $matchInstance = ConvertFrom-JsonToFieldWasClause $Json

                foreach($property in $matchInstance.PsObject.Properties) {
                    if ($null -ne $property.Value) {
                        $matchType = "FieldWasClause"
                        $match++
                        break
                    }
                }
            } catch {
                # fail to match the schema defined in anyOf, proceed to the next one
                Write-Debug "Failed to match 'FieldWasClause' defined in anyOf (JqlQueryClause). Proceeding to the next one if any."
            }
        }

        if ($match -eq 1) {
            return [PSCustomObject]@{
                "ActualType" = ${matchType}
                "ActualInstance" = ${matchInstance}
                "anyOfSchemas" = @("CompoundClause", "FieldChangedClause", "FieldValueClause", "FieldWasClause")
            }
        } else {
            throw "Error! The JSON payload doesn't matches any type defined in anyOf schemas ([CompoundClause, FieldChangedClause, FieldValueClause, FieldWasClause]). JSON Payload: $($Json)"
        }
    }
}


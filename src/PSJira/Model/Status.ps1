#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The status of the item.

.PARAMETER Icon
Details of the icon representing the status. If not provided, no status icon displays in Jira.
.PARAMETER Resolved
Whether the item is resolved. If set to ""true"", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font.
.OUTPUTS

Status<PSCustomObject>
#>

function Initialize-Status {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Icon},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Resolved}
    )

    Process {
        'Creating PSCustomObject: PSJira => Status' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "icon" = ${Icon}
            "resolved" = ${Resolved}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Status<PSCustomObject>

.DESCRIPTION

Convert from JSON to Status<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Status<PSCustomObject>
#>
function ConvertFrom-JsonToStatus {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Status' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $StatusAdditionalProperties = @{}

        # check if Json contains properties not defined in Status
        $AllProperties = ("icon", "resolved")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $StatusAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "icon"))) { #optional property not found
            $Icon = $null
        } else {
            $Icon = $JsonParameters.PSobject.Properties["icon"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolved"))) { #optional property not found
            $Resolved = $null
        } else {
            $Resolved = $JsonParameters.PSobject.Properties["resolved"].value
        }

        $PSO = [PSCustomObject]@{
            "icon" = ${Icon}
            "resolved" = ${Resolved}
            "AdditionalProperties" = $StatusAdditionalProperties
        }

        return $PSO
    }

}


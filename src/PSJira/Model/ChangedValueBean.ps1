#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of names changed in the record event.

.PARAMETER ChangedFrom
The value of the field before the change.
.PARAMETER ChangedTo
The value of the field after the change.
.PARAMETER FieldName
The name of the field changed.
.OUTPUTS

ChangedValueBean<PSCustomObject>
#>

function Initialize-ChangedValueBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChangedFrom},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChangedTo},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FieldName}
    )

    Process {
        'Creating PSCustomObject: PSJira => ChangedValueBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "changedFrom" = ${ChangedFrom}
            "changedTo" = ${ChangedTo}
            "fieldName" = ${FieldName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ChangedValueBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to ChangedValueBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ChangedValueBean<PSCustomObject>
#>
function ConvertFrom-JsonToChangedValueBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ChangedValueBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ChangedValueBean
        $AllProperties = ("changedFrom", "changedTo", "fieldName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "changedFrom"))) { #optional property not found
            $ChangedFrom = $null
        } else {
            $ChangedFrom = $JsonParameters.PSobject.Properties["changedFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "changedTo"))) { #optional property not found
            $ChangedTo = $null
        } else {
            $ChangedTo = $JsonParameters.PSobject.Properties["changedTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fieldName"))) { #optional property not found
            $FieldName = $null
        } else {
            $FieldName = $JsonParameters.PSobject.Properties["fieldName"].value
        }

        $PSO = [PSCustomObject]@{
            "changedFrom" = ${ChangedFrom}
            "changedTo" = ${ChangedTo}
            "fieldName" = ${FieldName}
        }

        return $PSO
    }

}


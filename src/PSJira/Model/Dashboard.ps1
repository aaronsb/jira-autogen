#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a dashboard.

.PARAMETER AutomaticRefreshMs
The automatic refresh interval for the dashboard in milliseconds.
.PARAMETER Description
No description available.
.PARAMETER EditPermissions
The details of any edit share permissions for the dashboard.
.PARAMETER Id
The ID of the dashboard.
.PARAMETER IsFavourite
Whether the dashboard is selected as a favorite by the user.
.PARAMETER IsWritable
Whether the current user has permission to edit the dashboard.
.PARAMETER Name
The name of the dashboard.
.PARAMETER Owner
No description available.
.PARAMETER Popularity
The number of users who have this dashboard as a favorite.
.PARAMETER Rank
The rank of this dashboard.
.PARAMETER Self
The URL of these dashboard details.
.PARAMETER SharePermissions
The details of any view share permissions for the dashboard.
.PARAMETER SystemDashboard
Whether the current dashboard is system dashboard.
.PARAMETER View
The URL of the dashboard.
.OUTPUTS

Dashboard<PSCustomObject>
#>

function Initialize-Dashboard {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AutomaticRefreshMs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${EditPermissions},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFavourite},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsWritable},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Popularity},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Rank},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SharePermissions},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SystemDashboard},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${View}
    )

    Process {
        'Creating PSCustomObject: PSJira => Dashboard' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "automaticRefreshMs" = ${AutomaticRefreshMs}
            "description" = ${Description}
            "editPermissions" = ${EditPermissions}
            "id" = ${Id}
            "isFavourite" = ${IsFavourite}
            "isWritable" = ${IsWritable}
            "name" = ${Name}
            "owner" = ${Owner}
            "popularity" = ${Popularity}
            "rank" = ${Rank}
            "self" = ${Self}
            "sharePermissions" = ${SharePermissions}
            "systemDashboard" = ${SystemDashboard}
            "view" = ${View}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Dashboard<PSCustomObject>

.DESCRIPTION

Convert from JSON to Dashboard<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Dashboard<PSCustomObject>
#>
function ConvertFrom-JsonToDashboard {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => Dashboard' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Dashboard
        $AllProperties = ("automaticRefreshMs", "description", "editPermissions", "id", "isFavourite", "isWritable", "name", "owner", "popularity", "rank", "self", "sharePermissions", "systemDashboard", "view")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "automaticRefreshMs"))) { #optional property not found
            $AutomaticRefreshMs = $null
        } else {
            $AutomaticRefreshMs = $JsonParameters.PSobject.Properties["automaticRefreshMs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "editPermissions"))) { #optional property not found
            $EditPermissions = $null
        } else {
            $EditPermissions = $JsonParameters.PSobject.Properties["editPermissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFavourite"))) { #optional property not found
            $IsFavourite = $null
        } else {
            $IsFavourite = $JsonParameters.PSobject.Properties["isFavourite"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isWritable"))) { #optional property not found
            $IsWritable = $null
        } else {
            $IsWritable = $JsonParameters.PSobject.Properties["isWritable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "popularity"))) { #optional property not found
            $Popularity = $null
        } else {
            $Popularity = $JsonParameters.PSobject.Properties["popularity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rank"))) { #optional property not found
            $Rank = $null
        } else {
            $Rank = $JsonParameters.PSobject.Properties["rank"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sharePermissions"))) { #optional property not found
            $SharePermissions = $null
        } else {
            $SharePermissions = $JsonParameters.PSobject.Properties["sharePermissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "systemDashboard"))) { #optional property not found
            $SystemDashboard = $null
        } else {
            $SystemDashboard = $JsonParameters.PSobject.Properties["systemDashboard"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "view"))) { #optional property not found
            $View = $null
        } else {
            $View = $JsonParameters.PSobject.Properties["view"].value
        }

        $PSO = [PSCustomObject]@{
            "automaticRefreshMs" = ${AutomaticRefreshMs}
            "description" = ${Description}
            "editPermissions" = ${EditPermissions}
            "id" = ${Id}
            "isFavourite" = ${IsFavourite}
            "isWritable" = ${IsWritable}
            "name" = ${Name}
            "owner" = ${Owner}
            "popularity" = ${Popularity}
            "rank" = ${Rank}
            "self" = ${Self}
            "sharePermissions" = ${SharePermissions}
            "systemDashboard" = ${SystemDashboard}
            "view" = ${View}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an issue update request.

.PARAMETER Fields
List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
.PARAMETER HistoryMetadata
Additional issue history details.
.PARAMETER Properties
Details of issue properties to be add or update.
.PARAMETER Transition
Details of a transition. Required when performing a transition, optional when creating or editing an issue.
.PARAMETER Update
A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
.OUTPUTS

IssueUpdateDetails<PSCustomObject>
#>

function Initialize-IssueUpdateDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Fields},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HistoryMetadata},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Properties},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Transition},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Update}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueUpdateDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "fields" = ${Fields}
            "historyMetadata" = ${HistoryMetadata}
            "properties" = ${Properties}
            "transition" = ${Transition}
            "update" = ${Update}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueUpdateDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueUpdateDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueUpdateDetails<PSCustomObject>
#>
function ConvertFrom-JsonToIssueUpdateDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueUpdateDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $IssueUpdateDetailsAdditionalProperties = @{}

        # check if Json contains properties not defined in IssueUpdateDetails
        $AllProperties = ("fields", "historyMetadata", "properties", "transition", "update")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $IssueUpdateDetailsAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fields"))) { #optional property not found
            $Fields = $null
        } else {
            $Fields = $JsonParameters.PSobject.Properties["fields"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "historyMetadata"))) { #optional property not found
            $HistoryMetadata = $null
        } else {
            $HistoryMetadata = $JsonParameters.PSobject.Properties["historyMetadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transition"))) { #optional property not found
            $Transition = $null
        } else {
            $Transition = $JsonParameters.PSobject.Properties["transition"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "update"))) { #optional property not found
            $Update = $null
        } else {
            $Update = $JsonParameters.PSobject.Properties["update"].value
        }

        $PSO = [PSCustomObject]@{
            "fields" = ${Fields}
            "historyMetadata" = ${HistoryMetadata}
            "properties" = ${Properties}
            "transition" = ${Transition}
            "update" = ${Update}
            "AdditionalProperties" = $IssueUpdateDetailsAdditionalProperties
        }

        return $PSO
    }

}


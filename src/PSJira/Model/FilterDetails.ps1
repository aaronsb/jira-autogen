#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of a filter.

.PARAMETER ApproximateLastUsed
\[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
.PARAMETER Description
The description of the filter.
.PARAMETER EditPermissions
The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.
.PARAMETER Expand
Expand options that include additional filter details in the response.
.PARAMETER Favourite
Whether the filter is selected as a favorite by any users, not including the filter owner.
.PARAMETER FavouritedCount
The count of how many users have selected this filter as a favorite, including the filter owner.
.PARAMETER Id
The unique identifier for the filter.
.PARAMETER Jql
The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
.PARAMETER Name
The name of the filter.
.PARAMETER Owner
No description available.
.PARAMETER SearchUrl
A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
.PARAMETER Self
The URL of the filter.
.PARAMETER SharePermissions
The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
.PARAMETER Subscriptions
The users that are subscribed to the filter.
.PARAMETER ViewUrl
A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
.OUTPUTS

FilterDetails<PSCustomObject>
#>

function Initialize-FilterDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ApproximateLastUsed},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${EditPermissions},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Expand},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Favourite},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FavouritedCount},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Jql},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SearchUrl},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Self},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SharePermissions},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Subscriptions},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ViewUrl}
    )

    Process {
        'Creating PSCustomObject: PSJira => FilterDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "approximateLastUsed" = ${ApproximateLastUsed}
            "description" = ${Description}
            "editPermissions" = ${EditPermissions}
            "expand" = ${Expand}
            "favourite" = ${Favourite}
            "favouritedCount" = ${FavouritedCount}
            "id" = ${Id}
            "jql" = ${Jql}
            "name" = ${Name}
            "owner" = ${Owner}
            "searchUrl" = ${SearchUrl}
            "self" = ${Self}
            "sharePermissions" = ${SharePermissions}
            "subscriptions" = ${Subscriptions}
            "viewUrl" = ${ViewUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FilterDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to FilterDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FilterDetails<PSCustomObject>
#>
function ConvertFrom-JsonToFilterDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => FilterDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FilterDetails
        $AllProperties = ("approximateLastUsed", "description", "editPermissions", "expand", "favourite", "favouritedCount", "id", "jql", "name", "owner", "searchUrl", "self", "sharePermissions", "subscriptions", "viewUrl")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approximateLastUsed"))) { #optional property not found
            $ApproximateLastUsed = $null
        } else {
            $ApproximateLastUsed = $JsonParameters.PSobject.Properties["approximateLastUsed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "editPermissions"))) { #optional property not found
            $EditPermissions = $null
        } else {
            $EditPermissions = $JsonParameters.PSobject.Properties["editPermissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expand"))) { #optional property not found
            $Expand = $null
        } else {
            $Expand = $JsonParameters.PSobject.Properties["expand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "favourite"))) { #optional property not found
            $Favourite = $null
        } else {
            $Favourite = $JsonParameters.PSobject.Properties["favourite"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "favouritedCount"))) { #optional property not found
            $FavouritedCount = $null
        } else {
            $FavouritedCount = $JsonParameters.PSobject.Properties["favouritedCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jql"))) { #optional property not found
            $Jql = $null
        } else {
            $Jql = $JsonParameters.PSobject.Properties["jql"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "searchUrl"))) { #optional property not found
            $SearchUrl = $null
        } else {
            $SearchUrl = $JsonParameters.PSobject.Properties["searchUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sharePermissions"))) { #optional property not found
            $SharePermissions = $null
        } else {
            $SharePermissions = $JsonParameters.PSobject.Properties["sharePermissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subscriptions"))) { #optional property not found
            $Subscriptions = $null
        } else {
            $Subscriptions = $JsonParameters.PSobject.Properties["subscriptions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "viewUrl"))) { #optional property not found
            $ViewUrl = $null
        } else {
            $ViewUrl = $JsonParameters.PSobject.Properties["viewUrl"].value
        }

        $PSO = [PSCustomObject]@{
            "approximateLastUsed" = ${ApproximateLastUsed}
            "description" = ${Description}
            "editPermissions" = ${EditPermissions}
            "expand" = ${Expand}
            "favourite" = ${Favourite}
            "favouritedCount" = ${FavouritedCount}
            "id" = ${Id}
            "jql" = ${Jql}
            "name" = ${Name}
            "owner" = ${Owner}
            "searchUrl" = ${SearchUrl}
            "self" = ${Self}
            "sharePermissions" = ${SharePermissions}
            "subscriptions" = ${Subscriptions}
            "viewUrl" = ${ViewUrl}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The default timezone of the Jira server. In a format known as Olson Time Zones, IANA Time Zones or TZ Database Time Zones.

.PARAMETER DisplayName
No description available.
.PARAMETER Dstsavings
No description available.
.PARAMETER Id
No description available.
.PARAMETER RawOffset
No description available.
.OUTPUTS

ServerInformationServerTimeZone<PSCustomObject>
#>

function Initialize-ServerInformationServerTimeZone {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Dstsavings},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RawOffset}
    )

    Process {
        'Creating PSCustomObject: PSJira => ServerInformationServerTimeZone' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "displayName" = ${DisplayName}
            "dstsavings" = ${Dstsavings}
            "id" = ${Id}
            "rawOffset" = ${RawOffset}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServerInformationServerTimeZone<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServerInformationServerTimeZone<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServerInformationServerTimeZone<PSCustomObject>
#>
function ConvertFrom-JsonToServerInformationServerTimeZone {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => ServerInformationServerTimeZone' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ServerInformationServerTimeZone
        $AllProperties = ("displayName", "dstsavings", "id", "rawOffset")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dstsavings"))) { #optional property not found
            $Dstsavings = $null
        } else {
            $Dstsavings = $JsonParameters.PSobject.Properties["dstsavings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rawOffset"))) { #optional property not found
            $RawOffset = $null
        } else {
            $RawOffset = $JsonParameters.PSobject.Properties["rawOffset"].value
        }

        $PSO = [PSCustomObject]@{
            "displayName" = ${DisplayName}
            "dstsavings" = ${Dstsavings}
            "id" = ${Id}
            "rawOffset" = ${RawOffset}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of the association between an issue type scheme and project.

.PARAMETER IssueTypeSchemeId
The ID of the issue type scheme.
.PARAMETER ProjectId
The ID of the project.
.OUTPUTS

IssueTypeSchemeProjectAssociation<PSCustomObject>
#>

function Initialize-IssueTypeSchemeProjectAssociation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueTypeSchemeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectId}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueTypeSchemeProjectAssociation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $IssueTypeSchemeId) {
            throw "invalid value for 'IssueTypeSchemeId', 'IssueTypeSchemeId' cannot be null."
        }

        if ($null -eq $ProjectId) {
            throw "invalid value for 'ProjectId', 'ProjectId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "issueTypeSchemeId" = ${IssueTypeSchemeId}
            "projectId" = ${ProjectId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueTypeSchemeProjectAssociation<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueTypeSchemeProjectAssociation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueTypeSchemeProjectAssociation<PSCustomObject>
#>
function ConvertFrom-JsonToIssueTypeSchemeProjectAssociation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueTypeSchemeProjectAssociation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IssueTypeSchemeProjectAssociation
        $AllProperties = ("issueTypeSchemeId", "projectId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'issueTypeSchemeId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueTypeSchemeId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issueTypeSchemeId' missing."
        } else {
            $IssueTypeSchemeId = $JsonParameters.PSobject.Properties["issueTypeSchemeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'projectId' missing."
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        $PSO = [PSCustomObject]@{
            "issueTypeSchemeId" = ${IssueTypeSchemeId}
            "projectId" = ${ProjectId}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details of an issue priority.

.PARAMETER Description
The description of the priority.
.PARAMETER IconUrl
The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
.PARAMETER Name
The name of the priority. Must be unique.
.PARAMETER StatusColor
The status color of the priority in 3-digit or 6-digit hexadecimal format.
.OUTPUTS

CreatePriorityDetails<PSCustomObject>
#>

function Initialize-CreatePriorityDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("/images/icons/priorities/blocker.png", "/images/icons/priorities/critical.png", "/images/icons/priorities/high.png", "/images/icons/priorities/highest.png", "/images/icons/priorities/low.png", "/images/icons/priorities/lowest.png", "/images/icons/priorities/major.png", "/images/icons/priorities/medium.png", "/images/icons/priorities/minor.png", "/images/icons/priorities/trivial.png")]
        [String]
        ${IconUrl},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusColor}
    )

    Process {
        'Creating PSCustomObject: PSJira => CreatePriorityDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Description -and $Description.length -gt 255) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 255."
        }

        if (!$IconUrl -and $IconUrl.length -gt 255) {
            throw "invalid value for 'IconUrl', the character length must be smaller than or equal to 255."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 60) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 60."
        }

        if ($null -eq $StatusColor) {
            throw "invalid value for 'StatusColor', 'StatusColor' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "iconUrl" = ${IconUrl}
            "name" = ${Name}
            "statusColor" = ${StatusColor}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreatePriorityDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreatePriorityDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreatePriorityDetails<PSCustomObject>
#>
function ConvertFrom-JsonToCreatePriorityDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => CreatePriorityDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $CreatePriorityDetailsAdditionalProperties = @{}

        # check if Json contains properties not defined in CreatePriorityDetails
        $AllProperties = ("description", "iconUrl", "name", "statusColor")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $CreatePriorityDetailsAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusColor"))) {
            throw "Error! JSON cannot be serialized due to the required property 'statusColor' missing."
        } else {
            $StatusColor = $JsonParameters.PSobject.Properties["statusColor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iconUrl"))) { #optional property not found
            $IconUrl = $null
        } else {
            $IconUrl = $JsonParameters.PSobject.Properties["iconUrl"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "iconUrl" = ${IconUrl}
            "name" = ${Name}
            "statusColor" = ${StatusColor}
            "AdditionalProperties" = $CreatePriorityDetailsAdditionalProperties
        }

        return $PSO
    }

}


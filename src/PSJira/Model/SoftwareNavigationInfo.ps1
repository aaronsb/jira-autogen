#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BoardId
No description available.
.PARAMETER BoardName
No description available.
.PARAMETER SimpleBoard
No description available.
.PARAMETER TotalBoardsInProject
No description available.
.OUTPUTS

SoftwareNavigationInfo<PSCustomObject>
#>

function Initialize-SoftwareNavigationInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BoardId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BoardName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SimpleBoard},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalBoardsInProject}
    )

    Process {
        'Creating PSCustomObject: PSJira => SoftwareNavigationInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "boardId" = ${BoardId}
            "boardName" = ${BoardName}
            "simpleBoard" = ${SimpleBoard}
            "totalBoardsInProject" = ${TotalBoardsInProject}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SoftwareNavigationInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to SoftwareNavigationInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SoftwareNavigationInfo<PSCustomObject>
#>
function ConvertFrom-JsonToSoftwareNavigationInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => SoftwareNavigationInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SoftwareNavigationInfo
        $AllProperties = ("boardId", "boardName", "simpleBoard", "totalBoardsInProject")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boardId"))) { #optional property not found
            $BoardId = $null
        } else {
            $BoardId = $JsonParameters.PSobject.Properties["boardId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boardName"))) { #optional property not found
            $BoardName = $null
        } else {
            $BoardName = $JsonParameters.PSobject.Properties["boardName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "simpleBoard"))) { #optional property not found
            $SimpleBoard = $null
        } else {
            $SimpleBoard = $JsonParameters.PSobject.Properties["simpleBoard"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalBoardsInProject"))) { #optional property not found
            $TotalBoardsInProject = $null
        } else {
            $TotalBoardsInProject = $JsonParameters.PSobject.Properties["totalBoardsInProject"].value
        }

        $PSO = [PSCustomObject]@{
            "boardId" = ${BoardId}
            "boardName" = ${BoardName}
            "simpleBoard" = ${SimpleBoard}
            "totalBoardsInProject" = ${TotalBoardsInProject}
        }

        return $PSO
    }

}


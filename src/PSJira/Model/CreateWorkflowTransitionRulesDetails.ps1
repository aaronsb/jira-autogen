#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The details of a workflow transition rules.

.PARAMETER Conditions
The workflow conditions.
.PARAMETER PostFunctions
The workflow post functions.  **Note:** The default post functions are always added to the *initial* transition, as in:      ""postFunctions"": [         {             ""type"": ""IssueCreateFunction""         },         {             ""type"": ""IssueReindexFunction""         },         {             ""type"": ""FireIssueEventFunction"",             ""configuration"": {                 ""event"": {                     ""id"": ""1"",                     ""name"": ""issue_created""                 }             }         }     ]  **Note:** The default post functions are always added to the *global* and *directed* transitions, as in:      ""postFunctions"": [         {             ""type"": ""UpdateIssueStatusFunction""         },         {             ""type"": ""CreateCommentFunction""         },         {             ""type"": ""GenerateChangeHistoryFunction""         },         {             ""type"": ""IssueReindexFunction""         },         {             ""type"": ""FireIssueEventFunction"",             ""configuration"": {                 ""event"": {                     ""id"": ""13"",                     ""name"": ""issue_generic""                 }             }         }     ]
.PARAMETER Validators
The workflow validators.  **Note:** The default permission validator is always added to the *initial* transition, as in:      ""validators"": [         {             ""type"": ""PermissionValidator"",             ""configuration"": {                 ""permissionKey"": ""CREATE_ISSUES""             }         }     ]
.OUTPUTS

CreateWorkflowTransitionRulesDetails<PSCustomObject>
#>

function Initialize-CreateWorkflowTransitionRulesDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Conditions},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PostFunctions},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Validators}
    )

    Process {
        'Creating PSCustomObject: PSJira => CreateWorkflowTransitionRulesDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "conditions" = ${Conditions}
            "postFunctions" = ${PostFunctions}
            "validators" = ${Validators}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateWorkflowTransitionRulesDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateWorkflowTransitionRulesDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateWorkflowTransitionRulesDetails<PSCustomObject>
#>
function ConvertFrom-JsonToCreateWorkflowTransitionRulesDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => CreateWorkflowTransitionRulesDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateWorkflowTransitionRulesDetails
        $AllProperties = ("conditions", "postFunctions", "validators")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conditions"))) { #optional property not found
            $Conditions = $null
        } else {
            $Conditions = $JsonParameters.PSobject.Properties["conditions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postFunctions"))) { #optional property not found
            $PostFunctions = $null
        } else {
            $PostFunctions = $JsonParameters.PSobject.Properties["postFunctions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validators"))) { #optional property not found
            $Validators = $null
        } else {
            $Validators = $JsonParameters.PSobject.Properties["validators"].value
        }

        $PSO = [PSCustomObject]@{
            "conditions" = ${Conditions}
            "postFunctions" = ${PostFunctions}
            "validators" = ${Validators}
        }

        return $PSO
    }

}


#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Board
The ID of the board that is available under the `board` variable when evaluating the expression.
.PARAMETER Custom
Custom context variables and their types. These variable types are available for use in a custom context:   *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  `json`: A JSON object containing custom content.  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
.PARAMETER CustomerRequest
The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
.PARAMETER Issue
The issue that is available under the `issue` variable when evaluating the expression.
.PARAMETER Issues
The collection of issues that is available under the `issues` variable when evaluating the expression.
.PARAMETER Project
The project that is available under the `project` variable when evaluating the expression.
.PARAMETER ServiceDesk
The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
.PARAMETER Sprint
The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
.OUTPUTS

JiraExpressionEvalContextBean<PSCustomObject>
#>

function Initialize-JiraExpressionEvalContextBean {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Board},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Custom},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CustomerRequest},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Issue},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Issues},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Project},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ServiceDesk},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Sprint}
    )

    Process {
        'Creating PSCustomObject: PSJira => JiraExpressionEvalContextBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "board" = ${Board}
            "custom" = ${Custom}
            "customerRequest" = ${CustomerRequest}
            "issue" = ${Issue}
            "issues" = ${Issues}
            "project" = ${Project}
            "serviceDesk" = ${ServiceDesk}
            "sprint" = ${Sprint}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JiraExpressionEvalContextBean<PSCustomObject>

.DESCRIPTION

Convert from JSON to JiraExpressionEvalContextBean<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JiraExpressionEvalContextBean<PSCustomObject>
#>
function ConvertFrom-JsonToJiraExpressionEvalContextBean {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => JiraExpressionEvalContextBean' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JiraExpressionEvalContextBean
        $AllProperties = ("board", "custom", "customerRequest", "issue", "issues", "project", "serviceDesk", "sprint")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "board"))) { #optional property not found
            $Board = $null
        } else {
            $Board = $JsonParameters.PSobject.Properties["board"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom"))) { #optional property not found
            $Custom = $null
        } else {
            $Custom = $JsonParameters.PSobject.Properties["custom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customerRequest"))) { #optional property not found
            $CustomerRequest = $null
        } else {
            $CustomerRequest = $JsonParameters.PSobject.Properties["customerRequest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issue"))) { #optional property not found
            $Issue = $null
        } else {
            $Issue = $JsonParameters.PSobject.Properties["issue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issues"))) { #optional property not found
            $Issues = $null
        } else {
            $Issues = $JsonParameters.PSobject.Properties["issues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "project"))) { #optional property not found
            $Project = $null
        } else {
            $Project = $JsonParameters.PSobject.Properties["project"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceDesk"))) { #optional property not found
            $ServiceDesk = $null
        } else {
            $ServiceDesk = $JsonParameters.PSobject.Properties["serviceDesk"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sprint"))) { #optional property not found
            $Sprint = $null
        } else {
            $Sprint = $JsonParameters.PSobject.Properties["sprint"].value
        }

        $PSO = [PSCustomObject]@{
            "board" = ${Board}
            "custom" = ${Custom}
            "customerRequest" = ${CustomerRequest}
            "issue" = ${Issue}
            "issues" = ${Issues}
            "project" = ${Project}
            "serviceDesk" = ${ServiceDesk}
            "sprint" = ${Sprint}
        }

        return $PSO
    }

}


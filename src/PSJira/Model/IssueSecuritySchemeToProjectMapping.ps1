#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details about an project using security scheme mapping.

.PARAMETER IssueSecuritySchemeId
No description available.
.PARAMETER ProjectId
No description available.
.OUTPUTS

IssueSecuritySchemeToProjectMapping<PSCustomObject>
#>

function Initialize-IssueSecuritySchemeToProjectMapping {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssueSecuritySchemeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectId}
    )

    Process {
        'Creating PSCustomObject: PSJira => IssueSecuritySchemeToProjectMapping' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "issueSecuritySchemeId" = ${IssueSecuritySchemeId}
            "projectId" = ${ProjectId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IssueSecuritySchemeToProjectMapping<PSCustomObject>

.DESCRIPTION

Convert from JSON to IssueSecuritySchemeToProjectMapping<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IssueSecuritySchemeToProjectMapping<PSCustomObject>
#>
function ConvertFrom-JsonToIssueSecuritySchemeToProjectMapping {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => IssueSecuritySchemeToProjectMapping' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $IssueSecuritySchemeToProjectMappingAdditionalProperties = @{}

        # check if Json contains properties not defined in IssueSecuritySchemeToProjectMapping
        $AllProperties = ("issueSecuritySchemeId", "projectId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $IssueSecuritySchemeToProjectMappingAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issueSecuritySchemeId"))) { #optional property not found
            $IssueSecuritySchemeId = $null
        } else {
            $IssueSecuritySchemeId = $JsonParameters.PSobject.Properties["issueSecuritySchemeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) { #optional property not found
            $ProjectId = $null
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        $PSO = [PSCustomObject]@{
            "issueSecuritySchemeId" = ${IssueSecuritySchemeId}
            "projectId" = ${ProjectId}
            "AdditionalProperties" = $IssueSecuritySchemeToProjectMappingAdditionalProperties
        }

        return $PSO
    }

}


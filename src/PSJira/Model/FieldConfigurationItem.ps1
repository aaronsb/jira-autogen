#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A field within a field configuration.

.PARAMETER Description
The description of the field within the field configuration.
.PARAMETER Id
The ID of the field within the field configuration.
.PARAMETER IsHidden
Whether the field is hidden in the field configuration.
.PARAMETER IsRequired
Whether the field is required in the field configuration.
.PARAMETER Renderer
The renderer type for the field within the field configuration.
.OUTPUTS

FieldConfigurationItem<PSCustomObject>
#>

function Initialize-FieldConfigurationItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsHidden},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsRequired},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Renderer}
    )

    Process {
        'Creating PSCustomObject: PSJira => FieldConfigurationItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "isHidden" = ${IsHidden}
            "isRequired" = ${IsRequired}
            "renderer" = ${Renderer}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FieldConfigurationItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to FieldConfigurationItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FieldConfigurationItem<PSCustomObject>
#>
function ConvertFrom-JsonToFieldConfigurationItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => FieldConfigurationItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FieldConfigurationItem
        $AllProperties = ("description", "id", "isHidden", "isRequired", "renderer")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isHidden"))) { #optional property not found
            $IsHidden = $null
        } else {
            $IsHidden = $JsonParameters.PSobject.Properties["isHidden"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isRequired"))) { #optional property not found
            $IsRequired = $null
        } else {
            $IsRequired = $JsonParameters.PSobject.Properties["isRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "renderer"))) { #optional property not found
            $Renderer = $null
        } else {
            $Renderer = $JsonParameters.PSobject.Properties["renderer"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "id" = ${Id}
            "isHidden" = ${IsHidden}
            "isRequired" = ${IsRequired}
            "renderer" = ${Renderer}
        }

        return $PSO
    }

}


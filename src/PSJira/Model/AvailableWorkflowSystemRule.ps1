#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The Atlassian provided system rules available.

.PARAMETER Description
The rule description.
.PARAMETER IncompatibleRuleKeys
List of rules that conflict with this one.
.PARAMETER IsAvailableForInitialTransition
Whether the rule can be added added to an initial transition.
.PARAMETER IsVisible
Whether the rule is visible.
.PARAMETER Name
The rule name.
.PARAMETER RuleKey
The rule key.
.PARAMETER RuleType
The rule type.
.OUTPUTS

AvailableWorkflowSystemRule<PSCustomObject>
#>

function Initialize-AvailableWorkflowSystemRule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IncompatibleRuleKeys},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsAvailableForInitialTransition},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsVisible},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RuleKey},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Condition", "Validator", "Function", "Screen")]
        [String]
        ${RuleType}
    )

    Process {
        'Creating PSCustomObject: PSJira => AvailableWorkflowSystemRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if ($null -eq $IncompatibleRuleKeys) {
            throw "invalid value for 'IncompatibleRuleKeys', 'IncompatibleRuleKeys' cannot be null."
        }

        if ($null -eq $IsAvailableForInitialTransition) {
            throw "invalid value for 'IsAvailableForInitialTransition', 'IsAvailableForInitialTransition' cannot be null."
        }

        if ($null -eq $IsVisible) {
            throw "invalid value for 'IsVisible', 'IsVisible' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $RuleKey) {
            throw "invalid value for 'RuleKey', 'RuleKey' cannot be null."
        }

        if ($null -eq $RuleType) {
            throw "invalid value for 'RuleType', 'RuleType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "incompatibleRuleKeys" = ${IncompatibleRuleKeys}
            "isAvailableForInitialTransition" = ${IsAvailableForInitialTransition}
            "isVisible" = ${IsVisible}
            "name" = ${Name}
            "ruleKey" = ${RuleKey}
            "ruleType" = ${RuleType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AvailableWorkflowSystemRule<PSCustomObject>

.DESCRIPTION

Convert from JSON to AvailableWorkflowSystemRule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AvailableWorkflowSystemRule<PSCustomObject>
#>
function ConvertFrom-JsonToAvailableWorkflowSystemRule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSJira => AvailableWorkflowSystemRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AvailableWorkflowSystemRule
        $AllProperties = ("description", "incompatibleRuleKeys", "isAvailableForInitialTransition", "isVisible", "name", "ruleKey", "ruleType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'description' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "incompatibleRuleKeys"))) {
            throw "Error! JSON cannot be serialized due to the required property 'incompatibleRuleKeys' missing."
        } else {
            $IncompatibleRuleKeys = $JsonParameters.PSobject.Properties["incompatibleRuleKeys"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isAvailableForInitialTransition"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isAvailableForInitialTransition' missing."
        } else {
            $IsAvailableForInitialTransition = $JsonParameters.PSobject.Properties["isAvailableForInitialTransition"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isVisible"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isVisible' missing."
        } else {
            $IsVisible = $JsonParameters.PSobject.Properties["isVisible"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleKey"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ruleKey' missing."
        } else {
            $RuleKey = $JsonParameters.PSobject.Properties["ruleKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ruleType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ruleType' missing."
        } else {
            $RuleType = $JsonParameters.PSobject.Properties["ruleType"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "incompatibleRuleKeys" = ${IncompatibleRuleKeys}
            "isAvailableForInitialTransition" = ${IsAvailableForInitialTransition}
            "isVisible" = ${IsVisible}
            "name" = ${Name}
            "ruleKey" = ${RuleKey}
            "ruleType" = ${RuleType}
        }

        return $PSO
    }

}


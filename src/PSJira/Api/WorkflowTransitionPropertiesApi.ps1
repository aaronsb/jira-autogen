#
# The Jira Cloud platform REST API
# Jira Cloud platform REST API documentation
# Version: 1001.0.0-SNAPSHOT-23ad6c5456aade2d59a4e9437ce49c945df2eb8f
# Contact: ecosystem@atlassian.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Create workflow transition property

.DESCRIPTION

No description available.

.PARAMETER TransitionId
The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.

.PARAMETER Key
The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.

.PARAMETER WorkflowName
The name of the workflow that the transition belongs to.

.PARAMETER WorkflowTransitionProperty
No description available.

.PARAMETER WorkflowMode
The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WorkflowTransitionProperty
#>
function New-WorkflowTransitionProperty {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int64]
        ${TransitionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Key},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WorkflowTransitionProperty},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("live", "draft")]
        [String]
        ${WorkflowMode},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: New-WorkflowTransitionProperty' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json')

        $LocalVarUri = '/rest/api/3/workflow/transitions/{transitionId}/properties'
        if (!$TransitionId) {
            throw "Error! The required parameter `TransitionId` missing when calling createWorkflowTransitionProperty."
        }
        $LocalVarUri = $LocalVarUri.replace('{transitionId}', [System.Web.HTTPUtility]::UrlEncode($TransitionId))

        if (!$Key) {
            throw "Error! The required parameter `Key` missing when calling createWorkflowTransitionProperty."
        }
        $LocalVarQueryParameters['key'] = $Key

        if (!$WorkflowName) {
            throw "Error! The required parameter `WorkflowName` missing when calling createWorkflowTransitionProperty."
        }
        $LocalVarQueryParameters['workflowName'] = $WorkflowName

        if ($WorkflowMode) {
            $LocalVarQueryParameters['workflowMode'] = $WorkflowMode
        }

        if (!$WorkflowTransitionProperty) {
            throw "Error! The required parameter `WorkflowTransitionProperty` missing when calling createWorkflowTransitionProperty."
        }

        $LocalVarBodyParameter = $WorkflowTransitionProperty | ConvertTo-Json -Depth 100


        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WorkflowTransitionProperty" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Delete workflow transition property

.DESCRIPTION

No description available.

.PARAMETER TransitionId
The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.

.PARAMETER Key
The name of the transition property to delete, also known as the name of the property.

.PARAMETER WorkflowName
The name of the workflow that the transition belongs to.

.PARAMETER WorkflowMode
The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DeleteWorkflowTransitionProperty {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int64]
        ${TransitionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Key},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("live", "draft")]
        [String]
        ${WorkflowMode},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DeleteWorkflowTransitionProperty' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/rest/api/3/workflow/transitions/{transitionId}/properties'
        if (!$TransitionId) {
            throw "Error! The required parameter `TransitionId` missing when calling deleteWorkflowTransitionProperty."
        }
        $LocalVarUri = $LocalVarUri.replace('{transitionId}', [System.Web.HTTPUtility]::UrlEncode($TransitionId))

        if (!$Key) {
            throw "Error! The required parameter `Key` missing when calling deleteWorkflowTransitionProperty."
        }
        $LocalVarQueryParameters['key'] = $Key

        if (!$WorkflowName) {
            throw "Error! The required parameter `WorkflowName` missing when calling deleteWorkflowTransitionProperty."
        }
        $LocalVarQueryParameters['workflowName'] = $WorkflowName

        if ($WorkflowMode) {
            $LocalVarQueryParameters['workflowMode'] = $WorkflowMode
        }


        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Get workflow transition properties

.DESCRIPTION

No description available.

.PARAMETER TransitionId
The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.

.PARAMETER WorkflowName
The name of the workflow that the transition belongs to.

.PARAMETER IncludeReservedKeys
Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.

.PARAMETER Key
The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.

.PARAMETER WorkflowMode
The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WorkflowTransitionProperty
#>
function Get-WorkflowTransitionProperties {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int64]
        ${TransitionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeReservedKeys},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Key},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("live", "draft")]
        [String]
        ${WorkflowMode},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-WorkflowTransitionProperties' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/rest/api/3/workflow/transitions/{transitionId}/properties'
        if (!$TransitionId) {
            throw "Error! The required parameter `TransitionId` missing when calling getWorkflowTransitionProperties."
        }
        $LocalVarUri = $LocalVarUri.replace('{transitionId}', [System.Web.HTTPUtility]::UrlEncode($TransitionId))

        if ($IncludeReservedKeys) {
            $LocalVarQueryParameters['includeReservedKeys'] = $IncludeReservedKeys
        }

        if ($Key) {
            $LocalVarQueryParameters['key'] = $Key
        }

        if (!$WorkflowName) {
            throw "Error! The required parameter `WorkflowName` missing when calling getWorkflowTransitionProperties."
        }
        $LocalVarQueryParameters['workflowName'] = $WorkflowName

        if ($WorkflowMode) {
            $LocalVarQueryParameters['workflowMode'] = $WorkflowMode
        }


        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WorkflowTransitionProperty" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Update workflow transition property

.DESCRIPTION

No description available.

.PARAMETER TransitionId
The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.

.PARAMETER Key
The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.

.PARAMETER WorkflowName
The name of the workflow that the transition belongs to.

.PARAMETER WorkflowTransitionProperty
No description available.

.PARAMETER WorkflowMode
The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WorkflowTransitionProperty
#>
function Update-WorkflowTransitionProperty {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int64]
        ${TransitionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Key},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WorkflowName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WorkflowTransitionProperty},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("live", "draft")]
        [String]
        ${WorkflowMode},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Update-WorkflowTransitionProperty' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json')

        $LocalVarUri = '/rest/api/3/workflow/transitions/{transitionId}/properties'
        if (!$TransitionId) {
            throw "Error! The required parameter `TransitionId` missing when calling updateWorkflowTransitionProperty."
        }
        $LocalVarUri = $LocalVarUri.replace('{transitionId}', [System.Web.HTTPUtility]::UrlEncode($TransitionId))

        if (!$Key) {
            throw "Error! The required parameter `Key` missing when calling updateWorkflowTransitionProperty."
        }
        $LocalVarQueryParameters['key'] = $Key

        if (!$WorkflowName) {
            throw "Error! The required parameter `WorkflowName` missing when calling updateWorkflowTransitionProperty."
        }
        $LocalVarQueryParameters['workflowName'] = $WorkflowName

        if ($WorkflowMode) {
            $LocalVarQueryParameters['workflowMode'] = $WorkflowMode
        }

        if (!$WorkflowTransitionProperty) {
            throw "Error! The required parameter `WorkflowTransitionProperty` missing when calling updateWorkflowTransitionProperty."
        }

        $LocalVarBodyParameter = $WorkflowTransitionProperty | ConvertTo-Json -Depth 100


        if ($Configuration["Username"] -and $Configuration["Password"]) {
            $LocalVarBytes = [System.Text.Encoding]::UTF8.GetBytes($Configuration["Username"] + ":" + $Configuration["Password"])
            $LocalVarBase64Text =[Convert]::ToBase64String($LocalVarBytes)
            $LocalVarHeaderParameters['Authorization'] = "Basic " + $LocalVarBase64Text
            Write-Verbose ("Using HTTP basic authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WorkflowTransitionProperty" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

